{"version":3,"sources":["webpack:///../src/docs/api/useExpanded.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"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","file":"component---src-docs-api-use-expanded-md-73f3f5976adac209da2e.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/jasonclark/Source/react-table-docz/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"useexpanded\"\n    }}><inlineCode parentName=\"h1\">{`useExpanded`}</inlineCode></h1>\n    <ul>\n      <li parentName=\"ul\">{`Plugin Hook`}</li>\n      <li parentName=\"ul\">{`Optional`}</li>\n    </ul>\n    <p><inlineCode parentName=\"p\">{`useExpanded`}</inlineCode>{` is the hook that implements `}<strong parentName=\"p\">{`row expanding`}</strong>{`. It is most often used with `}<inlineCode parentName=\"p\">{`useGroupBy`}</inlineCode>{` to expand grouped rows or on its own with nested `}<inlineCode parentName=\"p\">{`subRows`}</inlineCode>{` in tree-like `}<inlineCode parentName=\"p\">{`data`}</inlineCode>{` sets, but is not limited to these use-cases. It supports expanding rows both via internal table state and also via a hard-coded key on the raw row model.`}</p>\n    <h3 {...{\n      \"id\": \"table-options\"\n    }}>{`Table Options`}</h3>\n    <p>{`The following options are supported via the main options object passed to `}<inlineCode parentName=\"p\">{`useTable(options)`}</inlineCode></p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`initialState.expanded: Object<rowId: String, expanded: Bool>`}</inlineCode><ul parentName=\"li\">\n          <li parentName=\"ul\">{`Optional`}</li>\n          <li parentName=\"ul\">{`Must be `}<strong parentName=\"li\">{`memoized`}</strong></li>\n          <li parentName=\"ul\">{`An `}<inlineCode parentName=\"li\">{`object`}</inlineCode>{` of expanded row IDs with boolean property values.`}</li>\n          <li parentName=\"ul\">{`If a row's id is set to true in this object, that row will have an expanded state. For example, if `}<inlineCode parentName=\"li\">{`{ '3': true }`}</inlineCode>{` was passed as the `}<inlineCode parentName=\"li\">{`expanded`}</inlineCode>{` state, by default the `}<strong parentName=\"li\">{`4th row in the original data array`}</strong>{` would be expanded, since it would have that ID`}</li>\n          <li parentName=\"ul\">{`For nested expansion, you can `}<strong parentName=\"li\">{`use nested IDs like `}<inlineCode parentName=\"strong\">{`1.3`}</inlineCode></strong>{` to expand sub rows. For example, if `}<inlineCode parentName=\"li\">{`{ '3': true, '3.5': true }`}</inlineCode>{` was passed as the `}<inlineCode parentName=\"li\">{`expanded`}</inlineCode>{` state, then the `}<strong parentName=\"li\">{`the 4th row would be expanded, along with the 6th subRow of the 4th row as well`}</strong>{`.`}</li>\n          <li parentName=\"ul\">{`This information is stored in state since the table is allowed to manipulate the filter through user interaction.`}</li>\n        </ul></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`getSubRows: Function(row, relativeIndex) => Rows[]`}</inlineCode><ul parentName=\"li\">\n          <li parentName=\"ul\">{`Optional`}</li>\n          <li parentName=\"ul\">{`See the `}<a parentName=\"li\" {...{\n              \"href\": \"#table-options\"\n            }}>{`useTable hook`}</a>{` for more details`}</li>\n        </ul></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`manualExpandedKey: String`}</inlineCode><ul parentName=\"li\">\n          <li parentName=\"ul\">{`Optional`}</li>\n          <li parentName=\"ul\">{`Defaults to `}<inlineCode parentName=\"li\">{`expanded`}</inlineCode></li>\n          <li parentName=\"ul\">{`This string is used as the key to detect manual expanded state on any given row. For example, if a raw data row like `}<inlineCode parentName=\"li\">{`{ name: 'Tanner Linsley', friends: [...], expanded: true}`}</inlineCode>{` was detected, it would always be expanded, regardless of state.`}</li>\n        </ul></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`expandSubRows: Bool`}</inlineCode><ul parentName=\"li\">\n          <li parentName=\"ul\">{`Optional`}</li>\n          <li parentName=\"ul\">{`Defaults to `}<inlineCode parentName=\"li\">{`true`}</inlineCode></li>\n          <li parentName=\"ul\">{`If set to `}<inlineCode parentName=\"li\">{`true`}</inlineCode>{`, expanded rows are rendered along with normal rows.`}</li>\n          <li parentName=\"ul\">{`If set to `}<inlineCode parentName=\"li\">{`false`}</inlineCode>{`, expanded rows will only be available through their parent row. This could be useful if you are implementing a custom expanded row view.`}</li>\n        </ul></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`autoResetExpanded: Boolean`}</inlineCode><ul parentName=\"li\">\n          <li parentName=\"ul\">{`Defaults to `}<inlineCode parentName=\"li\">{`true`}</inlineCode></li>\n          <li parentName=\"ul\">{`When `}<inlineCode parentName=\"li\">{`true`}</inlineCode>{`, the `}<inlineCode parentName=\"li\">{`expanded`}</inlineCode>{` state will automatically reset if any of the following conditions are met:`}<ul parentName=\"li\">\n              <li parentName=\"ul\"><inlineCode parentName=\"li\">{`data`}</inlineCode>{` is changed`}</li>\n            </ul></li>\n          <li parentName=\"ul\">{`To disable, set to `}<inlineCode parentName=\"li\">{`false`}</inlineCode></li>\n          <li parentName=\"ul\">{`For more information see the FAQ `}<a parentName=\"li\" {...{\n              \"href\": \"../faq.md#how-do-i-stop-my-table-state-from-automatically-resetting-when-my-data-changes\"\n            }}>{`\"How do I stop my table state from automatically resetting when my data changes?\"`}</a></li>\n        </ul></li>\n    </ul>\n    <h3 {...{\n      \"id\": \"instance-properties\"\n    }}>{`Instance Properties`}</h3>\n    <p>{`The following properties are available on the table instance returned from `}<inlineCode parentName=\"p\">{`useTable`}</inlineCode></p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`rows: Array<Row>`}</inlineCode><ul parentName=\"li\">\n          <li parentName=\"ul\">{`An array of `}<strong parentName=\"li\">{`expanded`}</strong>{` rows.`}</li>\n        </ul></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`toggleRowExpanded: Function(rowId, isExpanded?)`}</inlineCode><ul parentName=\"li\">\n          <li parentName=\"ul\">{`A function to toggle whether a row is expanded or not. The `}<inlineCode parentName=\"li\">{`isExpanded`}</inlineCode>{` boolean is optional, otherwise it will be a true toggle action`}</li>\n        </ul></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`toggleAllRowsExpanded: Function(isExpanded?)`}</inlineCode><ul parentName=\"li\">\n          <li parentName=\"ul\">{`A function to toggle whether all of the rows in the table are expanded or not. The `}<inlineCode parentName=\"li\">{`isExpanded`}</inlineCode>{` boolean is optional, otherwise it will be a true toggle action`}</li>\n        </ul></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`isAllRowsExpanded`}</inlineCode></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`getToggleAllRowsExpandedProps: Function(userProps) => props`}</inlineCode><ul parentName=\"li\">\n          <li parentName=\"ul\">{`A prop getter function that returns all necessary props for an element to be clicked and toggle all of the rows expanded or not.`}</li>\n        </ul></li>\n    </ul>\n    <h3 {...{\n      \"id\": \"row-properties\"\n    }}>{`Row Properties`}</h3>\n    <p>{`The following additional properties are available on every `}<inlineCode parentName=\"p\">{`row`}</inlineCode>{` object returned by the table instance.`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`isExpanded: Bool`}</inlineCode><ul parentName=\"li\">\n          <li parentName=\"ul\">{`If `}<inlineCode parentName=\"li\">{`true`}</inlineCode>{`, this row is in an expanded state.`}</li>\n        </ul></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`toggleRowExpanded: Function(?isExpanded: Bool) => void`}</inlineCode><ul parentName=\"li\">\n          <li parentName=\"ul\">{`This function will toggle the expanded state of a row between `}<inlineCode parentName=\"li\">{`true`}</inlineCode>{` and `}<inlineCode parentName=\"li\">{`false`}</inlineCode>{` or, if an `}<inlineCode parentName=\"li\">{`isExpanded`}</inlineCode>{` boolean is passed to the function, it will be set as the new `}<inlineCode parentName=\"li\">{`isExpanded`}</inlineCode>{` value.`}</li>\n          <li parentName=\"ul\">{`Rows with a hard-coded `}<inlineCode parentName=\"li\">{`manualExpandedKey`}</inlineCode>{` (defaults to `}<inlineCode parentName=\"li\">{`expanded`}</inlineCode>{`) set to `}<inlineCode parentName=\"li\">{`true`}</inlineCode>{` are not affected by this function or the internal expanded state.`}</li>\n        </ul></li>\n    </ul>\n    <h3 {...{\n      \"id\": \"example\"\n    }}>{`Example`}</h3>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://github.com/tannerlinsley/react-table/tree/master/examples/expanding\"\n        }}>{`Source`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://codesandbox.io/s/github/tannerlinsley/react-table/tree/master/examples/expanding\"\n        }}>{`Open in CodeSandbox`}</a></li>\n    </ul>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}