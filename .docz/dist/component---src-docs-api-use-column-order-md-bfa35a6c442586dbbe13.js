(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{DwDM:function(e,t,n){"use strict";n.r(t),n.d(t,"_frontmatter",(function(){return l})),n.d(t,"default",(function(){return c}));n("5hJT"),n("W1QL"),n("K/PF"),n("t91x"),n("75LO"),n("PJhk"),n("mXGw");var a=n("/FXl"),r=n("TjRS");n("aD51");function i(){return(i=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e}).apply(this,arguments)}var l={};void 0!==l&&l&&l===Object(l)&&Object.isExtensible(l)&&!l.hasOwnProperty("__filemeta")&&Object.defineProperty(l,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"src/docs/api/useColumnOrder.md"}});var o={_frontmatter:l},b=r.a;function c(e){var t=e.components,n=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,["components"]);return Object(a.b)(b,i({},o,n,{components:t,mdxType:"MDXLayout"}),Object(a.b)("h1",{id:"usecolumnorder"},Object(a.b)("inlineCode",{parentName:"h1"},"useColumnOrder")),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"Plugin Hook"),Object(a.b)("li",{parentName:"ul"},"Optional")),Object(a.b)("p",null,Object(a.b)("inlineCode",{parentName:"p"},"useColumnOrder")," is a plugin hook that implements ",Object(a.b)("strong",{parentName:"p"},"basic column reordering"),". As columns are reordered, their header groups are reverse-engineered so as to never have orphaned header groups."),Object(a.b)("h3",{id:"table-options"},"Table Options"),Object(a.b)("p",null,"The following options are supported via the main options object passed to ",Object(a.b)("inlineCode",{parentName:"p"},"useTable(options)")),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"initialState.columnOrder: Array<ColumnId>"),Object(a.b)("ul",{parentName:"li"},Object(a.b)("li",{parentName:"ul"},"Optional"),Object(a.b)("li",{parentName:"ul"},"Defaults to ",Object(a.b)("inlineCode",{parentName:"li"},"[]")),Object(a.b)("li",{parentName:"ul"},"Any column ID's not represented in this array will be naturally ordered based on their position in the original table's ",Object(a.b)("inlineCode",{parentName:"li"},"column")," structure")))),Object(a.b)("h3",{id:"instance-properties"},"Instance Properties"),Object(a.b)("p",null,"The following values are provided to the table ",Object(a.b)("inlineCode",{parentName:"p"},"instance"),":"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},Object(a.b)("inlineCode",{parentName:"p"},"setColumnOrder: Function(updater: Function | Array<ColumnId>) => void")),Object(a.b)("ul",{parentName:"li"},Object(a.b)("li",{parentName:"ul"},"Use this function to programmatically update the columnOrder."),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"updater")," can be a function or value. If a ",Object(a.b)("inlineCode",{parentName:"li"},"function")," is passed, it will receive the current value and expect a new one to be returned."))),Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},Object(a.b)("a",i({parentName:"p"},{href:"https://github.com/tannerlinsley/react-table/tree/master/examples/column-ordering"}),"Source"))),Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},Object(a.b)("a",i({parentName:"p"},{href:"https://codesandbox.io/s/github/tannerlinsley/react-table/tree/master/examples/column-ordering"}),"Open in CodeSandbox")))))}c&&c===Object(c)&&Object.isExtensible(c)&&!c.hasOwnProperty("__filemeta")&&Object.defineProperty(c,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"src/docs/api/useColumnOrder.md"}}),c.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-docs-api-use-column-order-md-bfa35a6c442586dbbe13.js.map