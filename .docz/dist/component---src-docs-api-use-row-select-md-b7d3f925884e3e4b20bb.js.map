{"version":3,"sources":["webpack:///../src/docs/api/useRowSelect.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"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","file":"component---src-docs-api-use-row-select-md-b7d3f925884e3e4b20bb.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/jasonclark/Source/react-table-docz/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"userowselect\"\n    }}><inlineCode parentName=\"h1\">{`useRowSelect`}</inlineCode></h1>\n    <ul>\n      <li parentName=\"ul\">{`Plugin Hook`}</li>\n      <li parentName=\"ul\">{`Optional`}</li>\n    </ul>\n    <p><inlineCode parentName=\"p\">{`useRowSelect`}</inlineCode>{` is the hook that implements `}<strong parentName=\"p\">{`basic row selection`}</strong>{`. For more information on row selection, see Row Selection`}</p>\n    <h3 {...{\n      \"id\": \"table-options\"\n    }}>{`Table Options`}</h3>\n    <p>{`The following options are supported via the main options object passed to `}<inlineCode parentName=\"p\">{`useTable(options)`}</inlineCode></p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`initialState.selectedRowIds: Object<rowId: Boolean>`}</inlineCode><ul parentName=\"li\">\n          <li parentName=\"ul\">{`Optional`}</li>\n          <li parentName=\"ul\">{`Defaults to `}<inlineCode parentName=\"li\">{`{}`}</inlineCode></li>\n          <li parentName=\"ul\">{`If a row's ID is set to `}<inlineCode parentName=\"li\">{`true`}</inlineCode>{` in this object, it will have a selected state.`}</li>\n        </ul></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`manualRowSelectedKey: String`}</inlineCode><ul parentName=\"li\">\n          <li parentName=\"ul\">{`Optional`}</li>\n          <li parentName=\"ul\">{`Defaults to `}<inlineCode parentName=\"li\">{`isSelected`}</inlineCode></li>\n          <li parentName=\"ul\">{`If this key is found on the `}<strong parentName=\"li\">{`original`}</strong>{` data row, and it is true, this row will be manually selected`}</li>\n        </ul></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`autoResetSelectedRows: Boolean`}</inlineCode><ul parentName=\"li\">\n          <li parentName=\"ul\">{`Defaults to `}<inlineCode parentName=\"li\">{`true`}</inlineCode></li>\n          <li parentName=\"ul\">{`When `}<inlineCode parentName=\"li\">{`true`}</inlineCode>{`, the `}<inlineCode parentName=\"li\">{`selectedRowIds`}</inlineCode>{` state will automatically reset if any of the following conditions are met:`}<ul parentName=\"li\">\n              <li parentName=\"ul\"><inlineCode parentName=\"li\">{`data`}</inlineCode>{` is changed`}</li>\n            </ul></li>\n          <li parentName=\"ul\">{`To disable, set to `}<inlineCode parentName=\"li\">{`false`}</inlineCode></li>\n          <li parentName=\"ul\">{`For more information see the FAQ `}<a parentName=\"li\" {...{\n              \"href\": \"./faq#how-do-i-stop-my-table-state-from-automatically-resetting-when-my-data-changes\"\n            }}>{`\"How do I stop my table state from automatically resetting when my data changes?\"`}</a></li>\n        </ul></li>\n    </ul>\n    <h3 {...{\n      \"id\": \"instance-properties\"\n    }}>{`Instance Properties`}</h3>\n    <p>{`The following values are provided to the table `}<inlineCode parentName=\"p\">{`instance`}</inlineCode>{`:`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`toggleRowSelected: Function(rowPath: String, ?set: Bool) => void`}</inlineCode><ul parentName=\"li\">\n          <li parentName=\"ul\">{`Use this function to toggle a row's selected state.`}</li>\n          <li parentName=\"ul\">{`Optionally pass `}<inlineCode parentName=\"li\">{`true`}</inlineCode>{` or `}<inlineCode parentName=\"li\">{`false`}</inlineCode>{` to set it to that state`}</li>\n        </ul></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`toggleAllRowsSelected: Function(?set: Bool) => void`}</inlineCode><ul parentName=\"li\">\n          <li parentName=\"ul\">{`Use this function to toggle all rows as select or not`}</li>\n          <li parentName=\"ul\">{`Optionally pass `}<inlineCode parentName=\"li\">{`true`}</inlineCode>{` or `}<inlineCode parentName=\"li\">{`false`}</inlineCode>{` to set all rows to that state`}</li>\n        </ul></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`getToggleAllRowsSelectedProps: Function(props) => props`}</inlineCode><ul parentName=\"li\">\n          <li parentName=\"ul\">{`Use this function to get the props needed for a `}<strong parentName=\"li\">{`select all checkbox`}</strong>{`.`}</li>\n          <li parentName=\"ul\">{`Props:`}<ul parentName=\"li\">\n              <li parentName=\"ul\"><inlineCode parentName=\"li\">{`onChange: Function()`}</inlineCode></li>\n              <li parentName=\"ul\"><inlineCode parentName=\"li\">{`style.cursor: 'pointer'`}</inlineCode></li>\n              <li parentName=\"ul\"><inlineCode parentName=\"li\">{`checked: Bool`}</inlineCode></li>\n              <li parentName=\"ul\"><inlineCode parentName=\"li\">{`title: 'Toggle All Rows Selected'`}</inlineCode></li>\n            </ul></li>\n        </ul></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`isAllRowsSelected: Bool`}</inlineCode><ul parentName=\"li\">\n          <li parentName=\"ul\">{`Will be `}<inlineCode parentName=\"li\">{`true`}</inlineCode>{` if all rows are selected.`}</li>\n          <li parentName=\"ul\">{`If at least one row is not selected, will be `}<inlineCode parentName=\"li\">{`false`}</inlineCode></li>\n        </ul></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`selectedFlatRows: Array<Row>`}</inlineCode><ul parentName=\"li\">\n          <li parentName=\"ul\">{`The flat array of rows that are currently selected`}</li>\n        </ul></li>\n    </ul>\n    <h3 {...{\n      \"id\": \"row-properties\"\n    }}>{`Row Properties`}</h3>\n    <p>{`The following additional properties are available on every `}<strong parentName=\"p\">{`prepared`}</strong>{` `}<inlineCode parentName=\"p\">{`row`}</inlineCode>{` object returned by the table instance.`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`isSelected: Bool`}</inlineCode><ul parentName=\"li\">\n          <li parentName=\"ul\">{`Will be `}<inlineCode parentName=\"li\">{`true`}</inlineCode>{` if the row is currently selected`}</li>\n        </ul></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`isSomeSelected: Bool`}</inlineCode><ul parentName=\"li\">\n          <li parentName=\"ul\">{`Will be `}<inlineCode parentName=\"li\">{`true`}</inlineCode>{` if the row has subRows and at least one of them is currently selected`}</li>\n        </ul></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`toggleRowSelected: Function(?set)`}</inlineCode><ul parentName=\"li\">\n          <li parentName=\"ul\">{`Use this function to toggle this row's selected state.`}</li>\n          <li parentName=\"ul\">{`Optionally pass `}<inlineCode parentName=\"li\">{`true`}</inlineCode>{` or `}<inlineCode parentName=\"li\">{`false`}</inlineCode>{` to set it to that state`}</li>\n        </ul></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`getToggleRowSelectedProps: Function(props) => props`}</inlineCode><ul parentName=\"li\">\n          <li parentName=\"ul\">{`Use this function to get the props needed for a `}<strong parentName=\"li\">{`select row checkbox`}</strong>{`.`}</li>\n          <li parentName=\"ul\">{`Props:`}<ul parentName=\"li\">\n              <li parentName=\"ul\"><inlineCode parentName=\"li\">{`onChange: Function()`}</inlineCode></li>\n              <li parentName=\"ul\"><inlineCode parentName=\"li\">{`style.cursor: 'pointer'`}</inlineCode></li>\n              <li parentName=\"ul\"><inlineCode parentName=\"li\">{`checked: Bool`}</inlineCode></li>\n              <li parentName=\"ul\"><inlineCode parentName=\"li\">{`title: 'Toggle Row Selected'`}</inlineCode></li>\n            </ul></li>\n        </ul></li>\n    </ul>\n    <h3 {...{\n      \"id\": \"example\"\n    }}>{`Example`}</h3>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://github.com/tannerlinsley/react-table/tree/master/examples/row-selection\"\n        }}>{`Source`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://codesandbox.io/s/github/tannerlinsley/react-table/tree/master/examples/row-selection\"\n        }}>{`Open in CodeSandbox`}</a></li>\n    </ul>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}