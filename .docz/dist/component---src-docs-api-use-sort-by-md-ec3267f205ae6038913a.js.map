{"version":3,"sources":["webpack:///../src/docs/api/useSortBy.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"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","file":"component---src-docs-api-use-sort-by-md-ec3267f205ae6038913a.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/jasonclark/Source/react-table-docz/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"usesortby\"\n    }}><inlineCode parentName=\"h1\">{`useSortBy`}</inlineCode></h1>\n    <ul>\n      <li parentName=\"ul\">{`Plugin Hook`}</li>\n      <li parentName=\"ul\">{`Optional`}</li>\n    </ul>\n    <p><inlineCode parentName=\"p\">{`useSortBy`}</inlineCode>{` is the hook that implements `}<strong parentName=\"p\">{`row sorting`}</strong>{`. It also support multi-sort (keyboard required).`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Multi-sort is enabled by default`}</li>\n      <li parentName=\"ul\">{`To sort the table via UI, attach the props generated from each column's `}<inlineCode parentName=\"li\">{`getSortByToggleProps()`}</inlineCode>{`, then click any of those elements.`}</li>\n      <li parentName=\"ul\">{`To multi-sort the table via UI, hold `}<inlineCode parentName=\"li\">{`shift`}</inlineCode>{` while clicking on any of those same elements that have the props from `}<inlineCode parentName=\"li\">{`getSortByToggleProps()`}</inlineCode>{` attached.`}</li>\n      <li parentName=\"ul\">{`To programmatically sort (or multi-sort) any column, use the `}<inlineCode parentName=\"li\">{`toggleSortBy`}</inlineCode>{` method located on the instance or each individual column.`}</li>\n    </ul>\n    <h3 {...{\n      \"id\": \"table-options\"\n    }}>{`Table Options`}</h3>\n    <p>{`The following options are supported via the main options object passed to `}<inlineCode parentName=\"p\">{`useTable(options)`}</inlineCode></p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`initialState.sortBy: Array<Object<id: columnId, desc: Bool>>`}</inlineCode><ul parentName=\"li\">\n          <li parentName=\"ul\">{`Must be `}<strong parentName=\"li\">{`memoized`}</strong></li>\n          <li parentName=\"ul\">{`An array of sorting objects. If there is more than one object in the array, multi-sorting will be enabled. Each sorting object should contain an `}<inlineCode parentName=\"li\">{`id`}</inlineCode>{` key with the corresponding column ID to sort by. An optional `}<inlineCode parentName=\"li\">{`desc`}</inlineCode>{` key may be set to true or false to indicated ascending or descending sorting for that column. This information is stored in state since the table is allowed to manipulate the filter through user interaction.`}</li>\n        </ul></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`manualSortBy: Bool`}</inlineCode><ul parentName=\"li\">\n          <li parentName=\"ul\">{`Enables sorting detection functionality, but does not automatically perform row sorting. Turn this on if you wish to implement your own sorting outside of the table (eg. server-side or manual row grouping/nesting)`}</li>\n        </ul></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`disableSortBy: Bool`}</inlineCode><ul parentName=\"li\">\n          <li parentName=\"ul\">{`Disables sorting for every column in the entire table.`}</li>\n        </ul></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`defaultCanSort: Bool`}</inlineCode><ul parentName=\"li\">\n          <li parentName=\"ul\">{`Optional`}</li>\n          <li parentName=\"ul\">{`Defaults to `}<inlineCode parentName=\"li\">{`false`}</inlineCode></li>\n          <li parentName=\"ul\">{`If set to `}<inlineCode parentName=\"li\">{`true`}</inlineCode>{`, all columns will be sortable, regardless if they have a valid `}<inlineCode parentName=\"li\">{`accessor`}</inlineCode></li>\n        </ul></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`disableMultiSort: Bool`}</inlineCode><ul parentName=\"li\">\n          <li parentName=\"ul\">{`Disables multi-sorting for the entire table.`}</li>\n        </ul></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`isMultiSortEvent: Function`}</inlineCode><ul parentName=\"li\">\n          <li parentName=\"ul\">{`Allows to override default multisort behaviour(i.e. multisort applies when shift key is pressed), if this function is provided then returned boolean value from this function will make decision whether newly applied sort action will be considered as multisort or not.`}</li>\n          <li parentName=\"ul\">{`Receives `}<inlineCode parentName=\"li\">{`event`}</inlineCode>{` as argument.`}</li>\n        </ul></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`maxMultiSortColCount: Number`}</inlineCode><ul parentName=\"li\">\n          <li parentName=\"ul\">{`Limit on max number of columns for multisort, e.g. if set to 3, and suppose table is sorted by `}<inlineCode parentName=\"li\">{`[A, B, C]`}</inlineCode>{` and then clicking `}<inlineCode parentName=\"li\">{`D`}</inlineCode>{` for sorting should result in table sorted by `}<inlineCode parentName=\"li\">{`[B, C , D]`}</inlineCode></li>\n        </ul></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`disableSortRemove: Bool`}</inlineCode><ul parentName=\"li\">\n          <li parentName=\"ul\">{`If true, the un-sorted state will not be available to columns once they have been sorted.`}</li>\n        </ul></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`disableMultiRemove: Bool`}</inlineCode><ul parentName=\"li\">\n          <li parentName=\"ul\">{`If true, the un-sorted state will not be available to multi-sorted columns.`}</li>\n        </ul></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`orderByFn: Function`}</inlineCode><ul parentName=\"li\">\n          <li parentName=\"ul\">{`Must be `}<strong parentName=\"li\">{`memoized`}</strong></li>\n          <li parentName=\"ul\">{`Defaults to the built-in default orderBy function`}</li>\n          <li parentName=\"ul\">{`This function is responsible for composing multiple sorting functions together for multi-sorting, and also handles both the directional sorting and stable-sorting tie breaking. Rarely would you want to override this function unless you have a very advanced use-case that requires it.`}</li>\n        </ul></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`sortTypes: Object<sortKey: sortType>`}</inlineCode><ul parentName=\"li\">\n          <li parentName=\"ul\">{`Must be `}<strong parentName=\"li\">{`memoized`}</strong></li>\n          <li parentName=\"ul\">{`Allows overriding or adding additional sort types for columns to use. If a column's sort type isn't found on this object, it will default to using the built-in sort types.`}</li>\n          <li parentName=\"ul\">{`For more information on sort types, see Sorting`}</li>\n        </ul></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`autoResetSortBy: Boolean`}</inlineCode><ul parentName=\"li\">\n          <li parentName=\"ul\">{`Defaults to `}<inlineCode parentName=\"li\">{`true`}</inlineCode></li>\n          <li parentName=\"ul\">{`When `}<inlineCode parentName=\"li\">{`true`}</inlineCode>{`, the `}<inlineCode parentName=\"li\">{`sortBy`}</inlineCode>{` state will automatically reset if any of the following conditions are met:`}<ul parentName=\"li\">\n              <li parentName=\"ul\"><inlineCode parentName=\"li\">{`data`}</inlineCode>{` is changed`}</li>\n            </ul></li>\n          <li parentName=\"ul\">{`To disable, set to `}<inlineCode parentName=\"li\">{`false`}</inlineCode></li>\n          <li parentName=\"ul\">{`For more information see the FAQ `}<a parentName=\"li\" {...{\n              \"href\": \"../faq.md#how-do-i-stop-my-table-state-from-automatically-resetting-when-my-data-changes\"\n            }}>{`\"How do I stop my table state from automatically resetting when my data changes?\"`}</a></li>\n        </ul></li>\n    </ul>\n    <h3 {...{\n      \"id\": \"column-options\"\n    }}>{`Column Options`}</h3>\n    <p>{`The following options are supported on any `}<inlineCode parentName=\"p\">{`Column`}</inlineCode>{` object passed to the `}<inlineCode parentName=\"p\">{`columns`}</inlineCode>{` options in `}<inlineCode parentName=\"p\">{`useTable()`}</inlineCode></p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`defaultCanSort: Bool`}</inlineCode><ul parentName=\"li\">\n          <li parentName=\"ul\">{`Optional`}</li>\n          <li parentName=\"ul\">{`Defaults to `}<inlineCode parentName=\"li\">{`false`}</inlineCode></li>\n          <li parentName=\"ul\">{`If set to `}<inlineCode parentName=\"li\">{`true`}</inlineCode>{`, this column will be sortable, regardless if it has a valid `}<inlineCode parentName=\"li\">{`accessor`}</inlineCode></li>\n        </ul></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`disableSortBy: Bool`}</inlineCode><ul parentName=\"li\">\n          <li parentName=\"ul\">{`Optional`}</li>\n          <li parentName=\"ul\">{`Defaults to `}<inlineCode parentName=\"li\">{`false`}</inlineCode></li>\n          <li parentName=\"ul\">{`If set to `}<inlineCode parentName=\"li\">{`true`}</inlineCode>{`, the sorting for this column will be disabled`}</li>\n        </ul></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`sortDescFirst: Bool`}</inlineCode><ul parentName=\"li\">\n          <li parentName=\"ul\">{`Optional`}</li>\n          <li parentName=\"ul\">{`Defaults to `}<inlineCode parentName=\"li\">{`false`}</inlineCode></li>\n          <li parentName=\"ul\">{`If set to `}<inlineCode parentName=\"li\">{`true`}</inlineCode>{`, the first sort direction for this column will be descending instead of ascending`}</li>\n        </ul></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`sortInverted: Bool`}</inlineCode><ul parentName=\"li\">\n          <li parentName=\"ul\">{`Optional`}</li>\n          <li parentName=\"ul\">{`Defaults to `}<inlineCode parentName=\"li\">{`false`}</inlineCode></li>\n          <li parentName=\"ul\">{`If set to `}<inlineCode parentName=\"li\">{`true`}</inlineCode>{`, the underlying sorting direction will be inverted, but the UI will not.`}</li>\n          <li parentName=\"ul\">{`This may be useful in situations where positive and negative connotation is inverted, eg. a Golfing score where a lower score is considered more positive than a higher one.`}</li>\n        </ul></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`sortType: String | Function(rowA: <Row>, rowB: <Row>, columnId: String, desc: Bool)`}</inlineCode><ul parentName=\"li\">\n          <li parentName=\"ul\">{`Used to compare 2 rows of data and order them correctly.`}</li>\n          <li parentName=\"ul\">{`If a `}<strong parentName=\"li\">{`function`}</strong>{` is passed, it must be `}<strong parentName=\"li\">{`memoized`}</strong></li>\n          <li parentName=\"ul\">{`String options: `}<inlineCode parentName=\"li\">{`basic`}</inlineCode>{`, `}<inlineCode parentName=\"li\">{`datetime`}</inlineCode>{`, `}<inlineCode parentName=\"li\">{`alphanumeric`}</inlineCode>{`. Defaults to `}<inlineCode parentName=\"li\">{`alphanumeric`}</inlineCode>{`.`}</li>\n          <li parentName=\"ul\">{`The resolved function from the this string/function will be used to sort the this column's data.`}<ul parentName=\"li\">\n              <li parentName=\"ul\">{`If a `}<inlineCode parentName=\"li\">{`string`}</inlineCode>{` is passed, the function with that name located on either the custom `}<inlineCode parentName=\"li\">{`sortTypes`}</inlineCode>{` option or the built-in sorting types object will be used.`}</li>\n              <li parentName=\"ul\">{`If a `}<inlineCode parentName=\"li\">{`function`}</inlineCode>{` is passed, it will be used.`}</li>\n            </ul></li>\n          <li parentName=\"ul\">{`For more information on sort types, see Sorting`}</li>\n        </ul></li>\n    </ul>\n    <h3 {...{\n      \"id\": \"instance-properties\"\n    }}>{`Instance Properties`}</h3>\n    <p>{`The following values are provided to the table `}<inlineCode parentName=\"p\">{`instance`}</inlineCode>{`:`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`rows: Array<Row>`}</inlineCode><ul parentName=\"li\">\n          <li parentName=\"ul\">{`An array of `}<strong parentName=\"li\">{`sorted`}</strong>{` rows.`}</li>\n        </ul></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`preSortedRows: Array<Row>`}</inlineCode><ul parentName=\"li\">\n          <li parentName=\"ul\">{`The array of rows that were originally sorted.`}</li>\n        </ul></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`toggleSortBy: Function(ColumnId: String, descending: Bool, isMulti: Bool) => void`}</inlineCode><ul parentName=\"li\">\n          <li parentName=\"ul\">{`This function can be used to programmatically toggle the sorting for any specific column`}</li>\n        </ul></li>\n    </ul>\n    <h3 {...{\n      \"id\": \"column-properties\"\n    }}>{`Column Properties`}</h3>\n    <p>{`The following properties are available on every `}<inlineCode parentName=\"p\">{`Column`}</inlineCode>{` object returned by the table instance.`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`canSort: Bool`}</inlineCode><ul parentName=\"li\">\n          <li parentName=\"ul\">{`Denotes whether a column is sortable or not depending on if it has a valid accessor/data model or is manually disabled via an option.`}</li>\n        </ul></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`toggleSortBy: Function(descending, multi) => void`}</inlineCode><ul parentName=\"li\">\n          <li parentName=\"ul\">{`This function can be used to programmatically toggle the sorting for this column.`}</li>\n          <li parentName=\"ul\">{`This function is similar to the `}<inlineCode parentName=\"li\">{`instance`}</inlineCode>{`-level `}<inlineCode parentName=\"li\">{`toggleSortBy`}</inlineCode>{`, however, passing a columnId is not required since it is located on a `}<inlineCode parentName=\"li\">{`Column`}</inlineCode>{` object already.`}</li>\n        </ul></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`getSortByToggleProps: Function(props) => props`}</inlineCode><ul parentName=\"li\">\n          <li parentName=\"ul\"><strong parentName=\"li\">{`Required`}</strong></li>\n          <li parentName=\"ul\">{`This function is used to resolve any props needed for this column's UI that is responsible for toggling the sort direction when the user clicks it.`}</li>\n          <li parentName=\"ul\">{`You can use the `}<inlineCode parentName=\"li\">{`getSortByToggleProps`}</inlineCode>{` hook to extend its functionality.`}</li>\n          <li parentName=\"ul\">{`Custom props may be passed. `}<strong parentName=\"li\">{`NOTE: Custom props may override built-in sortBy props, so be careful!`}</strong></li>\n        </ul></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`clearSortBy: Function() => void`}</inlineCode><ul parentName=\"li\">\n          <li parentName=\"ul\">{`This function can be used to programmatically clear the sorting for this column.`}</li>\n        </ul></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`isSorted: Boolean`}</inlineCode><ul parentName=\"li\">\n          <li parentName=\"ul\">{`Denotes whether this column is currently being sorted`}</li>\n        </ul></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`sortedIndex: Int`}</inlineCode><ul parentName=\"li\">\n          <li parentName=\"ul\">{`If the column is currently sorted, this integer will be the index in the `}<inlineCode parentName=\"li\">{`sortBy`}</inlineCode>{` array from state that corresponds to this column.`}</li>\n          <li parentName=\"ul\">{`If this column is not sorted, the index will always be `}<inlineCode parentName=\"li\">{`-1`}</inlineCode></li>\n        </ul></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`isSortedDesc: Bool`}</inlineCode><ul parentName=\"li\">\n          <li parentName=\"ul\">{`If the column is currently sorted, this denotes whether the column's sort direction is descending or not.`}</li>\n          <li parentName=\"ul\">{`If `}<inlineCode parentName=\"li\">{`true`}</inlineCode>{`, the column is sorted `}<inlineCode parentName=\"li\">{`descending`}</inlineCode></li>\n          <li parentName=\"ul\">{`If `}<inlineCode parentName=\"li\">{`false`}</inlineCode>{`, the column is sorted `}<inlineCode parentName=\"li\">{`ascending`}</inlineCode></li>\n          <li parentName=\"ul\">{`If `}<inlineCode parentName=\"li\">{`undefined`}</inlineCode>{`, the column is not currently being sorted.`}</li>\n        </ul></li>\n    </ul>\n    <h3 {...{\n      \"id\": \"example\"\n    }}>{`Example`}</h3>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://github.com/tannerlinsley/react-table/tree/master/examples/sorting\"\n        }}>{`Source`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://codesandbox.io/s/github/tannerlinsley/react-table/tree/master/examples/sorting\"\n        }}>{`Open in CodeSandbox`}</a></li>\n    </ul>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}