(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{"7eyU":function(e,t,a){"use strict";a.r(t),a.d(t,"_frontmatter",(function(){return o})),a.d(t,"default",(function(){return p}));a("5hJT"),a("W1QL"),a("K/PF"),a("t91x"),a("75LO"),a("PJhk"),a("mXGw");var r=a("/FXl"),n=a("TjRS");a("aD51");function l(){return(l=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var a=arguments[t];for(var r in a)Object.prototype.hasOwnProperty.call(a,r)&&(e[r]=a[r])}return e}).apply(this,arguments)}var o={};void 0!==o&&o&&o===Object(o)&&Object.isExtensible(o)&&!o.hasOwnProperty("__filemeta")&&Object.defineProperty(o,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"src/docs/api/useAbsoluteLayout.md"}});var b={_frontmatter:o},i=n.a;function p(e){var t=e.components,a=function(e,t){if(null==e)return{};var a,r,n={},l=Object.keys(e);for(r=0;r<l.length;r++)a=l[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,["components"]);return Object(r.b)(i,l({},b,a,{components:t,mdxType:"MDXLayout"}),Object(r.b)("h1",{id:"useabsolutelayout"},Object(r.b)("inlineCode",{parentName:"h1"},"useAbsoluteLayout")),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"Plugin Hook"),Object(r.b)("li",{parentName:"ul"},"Optional")),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"useAbsoluteLayout")," is a plugin hook that adds support for headers and cells to be rendered as absolutely positioned ",Object(r.b)("inlineCode",{parentName:"p"},"div"),"s (or other non-table elements) with explicit ",Object(r.b)("inlineCode",{parentName:"p"},"width"),". Similar to the ",Object(r.b)("inlineCode",{parentName:"p"},"useBlockLayout")," hook, this becomes useful if and when you need to virtualize rows and cells for performance."),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"NOTE:")," Although no additional options are needed for this plugin to work, the core column options ",Object(r.b)("inlineCode",{parentName:"p"},"width"),", ",Object(r.b)("inlineCode",{parentName:"p"},"minWidth")," and ",Object(r.b)("inlineCode",{parentName:"p"},"maxWidth")," are used to calculate column and cell widths and must be set. ",Object(r.b)("a",l({parentName:"p"},{href:"#column-options"}),"See Column Options")," for more information on these options."),Object(r.b)("h3",{id:"instance-properties"},"Instance Properties"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"getTableBodyProps"),Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"Usage Required")),Object(r.b)("li",{parentName:"ul"},"This core prop getter is required to to enable absolute layout for the table body")))),Object(r.b)("h3",{id:"row-properties"},"Row Properties"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"getRowProps"),Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"Usage Required")),Object(r.b)("li",{parentName:"ul"},"This core prop getter is required to to enable absolute layout for rows")))),Object(r.b)("h3",{id:"cell-properties"},"Cell Properties"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"getCellProps"),Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"Usage Required")),Object(r.b)("li",{parentName:"ul"},"This core prop getter is required to to enable absolute layout for rows cells")))),Object(r.b)("h3",{id:"headergroup-properties"},"HeaderGroup Properties"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"getHeaderGroupProps"),Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"Usage Required")),Object(r.b)("li",{parentName:"ul"},"This core prop getter is required to to enable absolute layout for headers")))),Object(r.b)("h3",{id:"header-properties"},"Header Properties"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"getHeaderProps"),Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"Usage Required")),Object(r.b)("li",{parentName:"ul"},"This core prop getter is required to to enable absolute layout for headers")))),Object(r.b)("h3",{id:"example"},"Example"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",l({parentName:"li"},{href:"https://github.com/tannerlinsley/react-table/tree/master/examples/absolute-layout"}),"Source")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",l({parentName:"li"},{href:"https://codesandbox.io/s/github/tannerlinsley/react-table/tree/master/examples/absolute-layout"}),"Open in CodeSandbox"))))}p&&p===Object(p)&&Object.isExtensible(p)&&!p.hasOwnProperty("__filemeta")&&Object.defineProperty(p,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"src/docs/api/useAbsoluteLayout.md"}}),p.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-docs-api-use-absolute-layout-md-cc0e36f455597d449f7a.js.map