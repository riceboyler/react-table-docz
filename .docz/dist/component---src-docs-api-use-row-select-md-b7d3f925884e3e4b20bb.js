(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{k9tr:function(e,t,l){"use strict";l.r(t),l.d(t,"_frontmatter",(function(){return b})),l.d(t,"default",(function(){return c}));l("5hJT"),l("W1QL"),l("K/PF"),l("t91x"),l("75LO"),l("PJhk"),l("mXGw");var a=l("/FXl"),n=l("TjRS");l("aD51");function i(){return(i=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var l=arguments[t];for(var a in l)Object.prototype.hasOwnProperty.call(l,a)&&(e[a]=l[a])}return e}).apply(this,arguments)}var b={};void 0!==b&&b&&b===Object(b)&&Object.isExtensible(b)&&!b.hasOwnProperty("__filemeta")&&Object.defineProperty(b,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"src/docs/api/useRowSelect.md"}});var o={_frontmatter:b},r=n.a;function c(e){var t=e.components,l=function(e,t){if(null==e)return{};var l,a,n={},i=Object.keys(e);for(a=0;a<i.length;a++)l=i[a],t.indexOf(l)>=0||(n[l]=e[l]);return n}(e,["components"]);return Object(a.b)(r,i({},o,l,{components:t,mdxType:"MDXLayout"}),Object(a.b)("h1",{id:"userowselect"},Object(a.b)("inlineCode",{parentName:"h1"},"useRowSelect")),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"Plugin Hook"),Object(a.b)("li",{parentName:"ul"},"Optional")),Object(a.b)("p",null,Object(a.b)("inlineCode",{parentName:"p"},"useRowSelect")," is the hook that implements ",Object(a.b)("strong",{parentName:"p"},"basic row selection"),". For more information on row selection, see Row Selection"),Object(a.b)("h3",{id:"table-options"},"Table Options"),Object(a.b)("p",null,"The following options are supported via the main options object passed to ",Object(a.b)("inlineCode",{parentName:"p"},"useTable(options)")),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"initialState.selectedRowIds: Object<rowId: Boolean>"),Object(a.b)("ul",{parentName:"li"},Object(a.b)("li",{parentName:"ul"},"Optional"),Object(a.b)("li",{parentName:"ul"},"Defaults to ",Object(a.b)("inlineCode",{parentName:"li"},"{}")),Object(a.b)("li",{parentName:"ul"},"If a row's ID is set to ",Object(a.b)("inlineCode",{parentName:"li"},"true")," in this object, it will have a selected state."))),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"manualRowSelectedKey: String"),Object(a.b)("ul",{parentName:"li"},Object(a.b)("li",{parentName:"ul"},"Optional"),Object(a.b)("li",{parentName:"ul"},"Defaults to ",Object(a.b)("inlineCode",{parentName:"li"},"isSelected")),Object(a.b)("li",{parentName:"ul"},"If this key is found on the ",Object(a.b)("strong",{parentName:"li"},"original")," data row, and it is true, this row will be manually selected"))),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"autoResetSelectedRows: Boolean"),Object(a.b)("ul",{parentName:"li"},Object(a.b)("li",{parentName:"ul"},"Defaults to ",Object(a.b)("inlineCode",{parentName:"li"},"true")),Object(a.b)("li",{parentName:"ul"},"When ",Object(a.b)("inlineCode",{parentName:"li"},"true"),", the ",Object(a.b)("inlineCode",{parentName:"li"},"selectedRowIds")," state will automatically reset if any of the following conditions are met:",Object(a.b)("ul",{parentName:"li"},Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"data")," is changed"))),Object(a.b)("li",{parentName:"ul"},"To disable, set to ",Object(a.b)("inlineCode",{parentName:"li"},"false")),Object(a.b)("li",{parentName:"ul"},"For more information see the FAQ ",Object(a.b)("a",i({parentName:"li"},{href:"./faq#how-do-i-stop-my-table-state-from-automatically-resetting-when-my-data-changes"}),'"How do I stop my table state from automatically resetting when my data changes?"'))))),Object(a.b)("h3",{id:"instance-properties"},"Instance Properties"),Object(a.b)("p",null,"The following values are provided to the table ",Object(a.b)("inlineCode",{parentName:"p"},"instance"),":"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"toggleRowSelected: Function(rowPath: String, ?set: Bool) => void"),Object(a.b)("ul",{parentName:"li"},Object(a.b)("li",{parentName:"ul"},"Use this function to toggle a row's selected state."),Object(a.b)("li",{parentName:"ul"},"Optionally pass ",Object(a.b)("inlineCode",{parentName:"li"},"true")," or ",Object(a.b)("inlineCode",{parentName:"li"},"false")," to set it to that state"))),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"toggleAllRowsSelected: Function(?set: Bool) => void"),Object(a.b)("ul",{parentName:"li"},Object(a.b)("li",{parentName:"ul"},"Use this function to toggle all rows as select or not"),Object(a.b)("li",{parentName:"ul"},"Optionally pass ",Object(a.b)("inlineCode",{parentName:"li"},"true")," or ",Object(a.b)("inlineCode",{parentName:"li"},"false")," to set all rows to that state"))),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"getToggleAllRowsSelectedProps: Function(props) => props"),Object(a.b)("ul",{parentName:"li"},Object(a.b)("li",{parentName:"ul"},"Use this function to get the props needed for a ",Object(a.b)("strong",{parentName:"li"},"select all checkbox"),"."),Object(a.b)("li",{parentName:"ul"},"Props:",Object(a.b)("ul",{parentName:"li"},Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"onChange: Function()")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"style.cursor: 'pointer'")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"checked: Bool")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"title: 'Toggle All Rows Selected'")))))),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"isAllRowsSelected: Bool"),Object(a.b)("ul",{parentName:"li"},Object(a.b)("li",{parentName:"ul"},"Will be ",Object(a.b)("inlineCode",{parentName:"li"},"true")," if all rows are selected."),Object(a.b)("li",{parentName:"ul"},"If at least one row is not selected, will be ",Object(a.b)("inlineCode",{parentName:"li"},"false")))),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"selectedFlatRows: Array<Row>"),Object(a.b)("ul",{parentName:"li"},Object(a.b)("li",{parentName:"ul"},"The flat array of rows that are currently selected")))),Object(a.b)("h3",{id:"row-properties"},"Row Properties"),Object(a.b)("p",null,"The following additional properties are available on every ",Object(a.b)("strong",{parentName:"p"},"prepared")," ",Object(a.b)("inlineCode",{parentName:"p"},"row")," object returned by the table instance."),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"isSelected: Bool"),Object(a.b)("ul",{parentName:"li"},Object(a.b)("li",{parentName:"ul"},"Will be ",Object(a.b)("inlineCode",{parentName:"li"},"true")," if the row is currently selected"))),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"isSomeSelected: Bool"),Object(a.b)("ul",{parentName:"li"},Object(a.b)("li",{parentName:"ul"},"Will be ",Object(a.b)("inlineCode",{parentName:"li"},"true")," if the row has subRows and at least one of them is currently selected"))),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"toggleRowSelected: Function(?set)"),Object(a.b)("ul",{parentName:"li"},Object(a.b)("li",{parentName:"ul"},"Use this function to toggle this row's selected state."),Object(a.b)("li",{parentName:"ul"},"Optionally pass ",Object(a.b)("inlineCode",{parentName:"li"},"true")," or ",Object(a.b)("inlineCode",{parentName:"li"},"false")," to set it to that state"))),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"getToggleRowSelectedProps: Function(props) => props"),Object(a.b)("ul",{parentName:"li"},Object(a.b)("li",{parentName:"ul"},"Use this function to get the props needed for a ",Object(a.b)("strong",{parentName:"li"},"select row checkbox"),"."),Object(a.b)("li",{parentName:"ul"},"Props:",Object(a.b)("ul",{parentName:"li"},Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"onChange: Function()")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"style.cursor: 'pointer'")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"checked: Bool")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"title: 'Toggle Row Selected'"))))))),Object(a.b)("h3",{id:"example"},"Example"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",i({parentName:"li"},{href:"https://github.com/tannerlinsley/react-table/tree/master/examples/row-selection"}),"Source")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",i({parentName:"li"},{href:"https://codesandbox.io/s/github/tannerlinsley/react-table/tree/master/examples/row-selection"}),"Open in CodeSandbox"))))}c&&c===Object(c)&&Object.isExtensible(c)&&!c.hasOwnProperty("__filemeta")&&Object.defineProperty(c,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"src/docs/api/useRowSelect.md"}}),c.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-docs-api-use-row-select-md-b7d3f925884e3e4b20bb.js.map