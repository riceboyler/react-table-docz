(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{Xr3D:function(e,t,l){"use strict";l.r(t),l.d(t,"_frontmatter",(function(){return r})),l.d(t,"default",(function(){return c}));l("5hJT"),l("W1QL"),l("K/PF"),l("t91x"),l("75LO"),l("PJhk"),l("mXGw");var a=l("/FXl"),i=l("TjRS");l("aD51");function n(){return(n=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var l=arguments[t];for(var a in l)Object.prototype.hasOwnProperty.call(l,a)&&(e[a]=l[a])}return e}).apply(this,arguments)}var r={};void 0!==r&&r&&r===Object(r)&&Object.isExtensible(r)&&!r.hasOwnProperty("__filemeta")&&Object.defineProperty(r,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"src/docs/api/useFilters.md"}});var b={_frontmatter:r},o=i.a;function c(e){var t=e.components,l=function(e,t){if(null==e)return{};var l,a,i={},n=Object.keys(e);for(a=0;a<n.length;a++)l=n[a],t.indexOf(l)>=0||(i[l]=e[l]);return i}(e,["components"]);return Object(a.b)(o,n({},b,l,{components:t,mdxType:"MDXLayout"}),Object(a.b)("h1",{id:"usefilters"},Object(a.b)("inlineCode",{parentName:"h1"},"useFilters")),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"Plugin Hook"),Object(a.b)("li",{parentName:"ul"},"Optional")),Object(a.b)("p",null,Object(a.b)("inlineCode",{parentName:"p"},"useFilters")," is the hook that implements ",Object(a.b)("strong",{parentName:"p"},"row filtering")," and can even be used in conjunction with ",Object(a.b)("inlineCode",{parentName:"p"},"useGlobalFilter"),". It's also important to note that this hook can be used either ",Object(a.b)("strong",{parentName:"p"},"before or after")," ",Object(a.b)("inlineCode",{parentName:"p"},"useGlobalFilter"),", depending on the performance characteristics you want to code for."),Object(a.b)("h3",{id:"table-options"},"Table Options"),Object(a.b)("p",null,"The following options are supported via the main options object passed to ",Object(a.b)("inlineCode",{parentName:"p"},"useTable(options)")),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"initialState.filters: Array<Object<id: String, value: any>>"),Object(a.b)("ul",{parentName:"li"},Object(a.b)("li",{parentName:"ul"},"Must be ",Object(a.b)("strong",{parentName:"li"},"memoized")),Object(a.b)("li",{parentName:"ul"},"An array of objects containing columnId's and their corresponding filter values. This information is stored in state since the table is allowed to manipulate the filter through user interaction."))),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"manualFilters: Bool"),Object(a.b)("ul",{parentName:"li"},Object(a.b)("li",{parentName:"ul"},"Enables filter detection functionality, but does not automatically perform row filtering."),Object(a.b)("li",{parentName:"ul"},"Turn this on if you wish to implement your own row filter outside of the table (eg. server-side or manual row grouping/nesting)"))),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"disableFilters: Bool"),Object(a.b)("ul",{parentName:"li"},Object(a.b)("li",{parentName:"ul"},"Disables filtering for every column in the entire table."))),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"defaultCanFilter: Bool"),Object(a.b)("ul",{parentName:"li"},Object(a.b)("li",{parentName:"ul"},"Optional"),Object(a.b)("li",{parentName:"ul"},"Defaults to ",Object(a.b)("inlineCode",{parentName:"li"},"false")),Object(a.b)("li",{parentName:"ul"},"If set to ",Object(a.b)("inlineCode",{parentName:"li"},"true"),", all columns will be filterable, regardless if they have a valid ",Object(a.b)("inlineCode",{parentName:"li"},"accessor")))),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"filterTypes: Object<filterKey: filterType>"),Object(a.b)("ul",{parentName:"li"},Object(a.b)("li",{parentName:"ul"},"Must be ",Object(a.b)("strong",{parentName:"li"},"memoized")),Object(a.b)("li",{parentName:"ul"},"Allows overriding or adding additional filter types for columns to use. If a column's filter type isn't found on this object, it will default to using the built-in filter types."),Object(a.b)("li",{parentName:"ul"},"For more information on filter types, see Filtering"))),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"autoResetFilters: Boolean"),Object(a.b)("ul",{parentName:"li"},Object(a.b)("li",{parentName:"ul"},"Defaults to ",Object(a.b)("inlineCode",{parentName:"li"},"true")),Object(a.b)("li",{parentName:"ul"},"When ",Object(a.b)("inlineCode",{parentName:"li"},"true"),", the ",Object(a.b)("inlineCode",{parentName:"li"},"filters")," state will automatically reset if any of the following conditions are met:",Object(a.b)("ul",{parentName:"li"},Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"data")," is changed"))),Object(a.b)("li",{parentName:"ul"},"To disable, set to ",Object(a.b)("inlineCode",{parentName:"li"},"false")),Object(a.b)("li",{parentName:"ul"},"For more information see the FAQ ",Object(a.b)("a",n({parentName:"li"},{href:"./faq#how-do-i-stop-my-table-state-from-automatically-resetting-when-my-data-changes"}),'"How do I stop my table state from automatically resetting when my data changes?"'))))),Object(a.b)("h3",{id:"column-options"},"Column Options"),Object(a.b)("p",null,"The following options are supported on any ",Object(a.b)("inlineCode",{parentName:"p"},"Column")," object passed to the ",Object(a.b)("inlineCode",{parentName:"p"},"columns")," options in ",Object(a.b)("inlineCode",{parentName:"p"},"useTable()")),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"Filter: Function | React.Component => JSX"),Object(a.b)("ul",{parentName:"li"},Object(a.b)("li",{parentName:"ul"},Object(a.b)("strong",{parentName:"li"},"Required")),Object(a.b)("li",{parentName:"ul"},"Receives the table instance and column model as props"),Object(a.b)("li",{parentName:"ul"},"Must return valid JSX"),Object(a.b)("li",{parentName:"ul"},"This function (or component) is used to render this column's filter UI, eg."))),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"disableFilters: Bool"),Object(a.b)("ul",{parentName:"li"},Object(a.b)("li",{parentName:"ul"},"Optional"),Object(a.b)("li",{parentName:"ul"},"If set to ",Object(a.b)("inlineCode",{parentName:"li"},"true"),", will disable filtering for this column"))),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"defaultCanFilter: Bool"),Object(a.b)("ul",{parentName:"li"},Object(a.b)("li",{parentName:"ul"},"Optional"),Object(a.b)("li",{parentName:"ul"},"Defaults to ",Object(a.b)("inlineCode",{parentName:"li"},"false")),Object(a.b)("li",{parentName:"ul"},"If set to ",Object(a.b)("inlineCode",{parentName:"li"},"true"),", this column will be filterable, regardless if it has a valid ",Object(a.b)("inlineCode",{parentName:"li"},"accessor")))),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"filter: String | Function"),Object(a.b)("ul",{parentName:"li"},Object(a.b)("li",{parentName:"ul"},"Optional"),Object(a.b)("li",{parentName:"ul"},"Defaults to ",Object(a.b)("inlineCode",{parentName:"li"},"text")),Object(a.b)("li",{parentName:"ul"},"The resolved function from the this string/function will be used to filter the this column's data.",Object(a.b)("ul",{parentName:"li"},Object(a.b)("li",{parentName:"ul"},"If a ",Object(a.b)("inlineCode",{parentName:"li"},"string")," is passed, the function with that name located on either the custom ",Object(a.b)("inlineCode",{parentName:"li"},"filterTypes")," option or the built-in filtering types object will be used. If"),Object(a.b)("li",{parentName:"ul"},"If a ",Object(a.b)("inlineCode",{parentName:"li"},"function")," is passed, it will be used directly."))),Object(a.b)("li",{parentName:"ul"},"For more information on filter types, see Filtering"),Object(a.b)("li",{parentName:"ul"},"If a ",Object(a.b)("strong",{parentName:"li"},"function")," is passed, it must be ",Object(a.b)("strong",{parentName:"li"},"memoized"))))),Object(a.b)("h3",{id:"instance-properties"},"Instance Properties"),Object(a.b)("p",null,"The following values are provided to the table ",Object(a.b)("inlineCode",{parentName:"p"},"instance"),":"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"rows: Array<Row>"),Object(a.b)("ul",{parentName:"li"},Object(a.b)("li",{parentName:"ul"},"An array of ",Object(a.b)("strong",{parentName:"li"},"filtered")," rows."))),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"preFilteredRows: Array<Row>"),Object(a.b)("ul",{parentName:"li"},Object(a.b)("li",{parentName:"ul"},"The array of rows ",Object(a.b)("strong",{parentName:"li"},"used right before filtering"),"."),Object(a.b)("li",{parentName:"ul"},"Among many other use-cases, these rows are directly useful for building option lists in filters, since the resulting filtered ",Object(a.b)("inlineCode",{parentName:"li"},"rows")," do not contain every possible option."))),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"setFilter: Function(columnId, filterValue) => void"),Object(a.b)("ul",{parentName:"li"},Object(a.b)("li",{parentName:"ul"},"An instance-level function used to update the filter value for a specific column."))),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"setAllFilters: Function(filtersObjectArray) => void"),Object(a.b)("ul",{parentName:"li"},Object(a.b)("li",{parentName:"ul"},"An instance-level function used to update the values for ",Object(a.b)("strong",{parentName:"li"},"all")," filters on the table, all at once."),Object(a.b)("li",{parentName:"ul"},"filtersObjectArray is an array of objects with id and value keys. Example: ",Object(a.b)("inlineCode",{parentName:"li"},"[{ id: 'columnAccessor', value: 'valueToFilter' }]")),Object(a.b)("li",{parentName:"ul"},"Note: You must call setAllFilters with an array, even if that array is empty. eg: ",Object(a.b)("inlineCode",{parentName:"li"},"setAllFilters([])"),".")))),Object(a.b)("h3",{id:"column-properties"},"Column Properties"),Object(a.b)("p",null,"The following properties are available on every ",Object(a.b)("inlineCode",{parentName:"p"},"Column")," object returned by the table instance."),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"canFilter: Bool"),Object(a.b)("ul",{parentName:"li"},Object(a.b)("li",{parentName:"ul"},"Denotes whether a column is filterable or not depending on if it has a valid accessor/data model or is manually disabled via an option."))),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"setFilter: Function(filterValue) => void"),Object(a.b)("ul",{parentName:"li"},Object(a.b)("li",{parentName:"ul"},"A column-level function used to update the filter value for this column"))),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"filterValue: any"),Object(a.b)("ul",{parentName:"li"},Object(a.b)("li",{parentName:"ul"},"The current filter value for this column, resolved from the table state's ",Object(a.b)("inlineCode",{parentName:"li"},"filters")," object"))),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"preFilteredRows: Array<row>"),Object(a.b)("ul",{parentName:"li"},Object(a.b)("li",{parentName:"ul"},"The array of rows that were originally passed to this columns filter ",Object(a.b)("strong",{parentName:"li"},"before")," they were filtered."),Object(a.b)("li",{parentName:"ul"},"This array of rows can be useful if building faceted filter options."))),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"filteredRows: Array<row>"),Object(a.b)("ul",{parentName:"li"},Object(a.b)("li",{parentName:"ul"},"The resulting array of rows received from this columns filter ",Object(a.b)("strong",{parentName:"li"},"after")," they were filtered."),Object(a.b)("li",{parentName:"ul"},"This array of rows can be useful if building faceted filter options.")))),Object(a.b)("h3",{id:"example"},"Example"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",n({parentName:"li"},{href:"https://github.com/tannerlinsley/react-table/tree/master/examples/filtering"}),"Source")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",n({parentName:"li"},{href:"https://codesandbox.io/s/github/tannerlinsley/react-table/tree/master/examples/filtering"}),"Open in CodeSandbox"))))}c&&c===Object(c)&&Object.isExtensible(c)&&!c.hasOwnProperty("__filemeta")&&Object.defineProperty(c,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"src/docs/api/useFilters.md"}}),c.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-docs-api-use-filters-md-713be8f1b3097086ae7c.js.map