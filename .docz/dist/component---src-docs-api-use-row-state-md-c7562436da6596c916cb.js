(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{"7/Ap":function(e,t,a){"use strict";a.r(t),a.d(t,"_frontmatter",(function(){return r})),a.d(t,"default",(function(){return c}));a("5hJT"),a("W1QL"),a("K/PF"),a("t91x"),a("75LO"),a("PJhk"),a("mXGw");var n=a("/FXl"),i=a("TjRS");a("aD51");function l(){return(l=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var a=arguments[t];for(var n in a)Object.prototype.hasOwnProperty.call(a,n)&&(e[n]=a[n])}return e}).apply(this,arguments)}var r={};void 0!==r&&r&&r===Object(r)&&Object.isExtensible(r)&&!r.hasOwnProperty("__filemeta")&&Object.defineProperty(r,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"src/docs/api/useRowState.md"}});var o={_frontmatter:r},b=i.a;function c(e){var t=e.components,a=function(e,t){if(null==e)return{};var a,n,i={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,["components"]);return Object(n.b)(b,l({},o,a,{components:t,mdxType:"MDXLayout"}),Object(n.b)("h1",{id:"userowstate"},Object(n.b)("inlineCode",{parentName:"h1"},"useRowState")),Object(n.b)("ul",null,Object(n.b)("li",{parentName:"ul"},"Plugin Hook"),Object(n.b)("li",{parentName:"ul"},"Optional")),Object(n.b)("p",null,Object(n.b)("inlineCode",{parentName:"p"},"useRowState")," is a plugin hook that implements ",Object(n.b)("strong",{parentName:"p"},"basic state management for ",Object(n.b)("em",{parentName:"strong"},"prepared")," rows and their cells"),"."),Object(n.b)("h3",{id:"table-options"},"Table Options"),Object(n.b)("p",null,"The following options are supported via the main options object passed to ",Object(n.b)("inlineCode",{parentName:"p"},"useTable(options)")),Object(n.b)("ul",null,Object(n.b)("li",{parentName:"ul"},Object(n.b)("inlineCode",{parentName:"li"},"initialState.rowState: Object<RowPathKey:Object<any, cellState: {columnId: Object}>>"),Object(n.b)("ul",{parentName:"li"},Object(n.b)("li",{parentName:"ul"},"Optional"),Object(n.b)("li",{parentName:"ul"},"Defaults to ",Object(n.b)("inlineCode",{parentName:"li"},"{}")),Object(n.b)("li",{parentName:"ul"},"If a row's ID is found in this array, it will have the state of the value corresponding to that key."),Object(n.b)("li",{parentName:"ul"},"Individual row states can contain anything, but they also contain a ",Object(n.b)("inlineCode",{parentName:"li"},"cellState")," key, which provides cell-level state based on column ID's to every\n",Object(n.b)("strong",{parentName:"li"},"prepared")," cell in the table."))),Object(n.b)("li",{parentName:"ul"},Object(n.b)("inlineCode",{parentName:"li"},"initialRowStateAccessor: Function(originalRow) => Object<any>"),Object(n.b)("ul",{parentName:"li"},Object(n.b)("li",{parentName:"ul"},"Optional"),Object(n.b)("li",{parentName:"ul"},"Defaults to: ",Object(n.b)("inlineCode",{parentName:"li"},"row => ({})")),Object(n.b)("li",{parentName:"ul"},"This function should return the initial state for a row."),Object(n.b)("li",{parentName:"ul"},"If this function is defined, it will be passed a ",Object(n.b)("inlineCode",{parentName:"li"},"Row")," object, from which you can return a value to use as the initial state, eg. ",Object(n.b)("inlineCode",{parentName:"li"},"row => row.original.initialState")))),Object(n.b)("li",{parentName:"ul"},Object(n.b)("inlineCode",{parentName:"li"},"initialCellStateAccessor: Function(originalRow) => Object<any>"),Object(n.b)("ul",{parentName:"li"},Object(n.b)("li",{parentName:"ul"},Object(n.b)("strong",{parentName:"li"},"Optional")),Object(n.b)("li",{parentName:"ul"},"Defaults to: ",Object(n.b)("inlineCode",{parentName:"li"},"cell => ({})")),Object(n.b)("li",{parentName:"ul"},"This function should return the initial state for a cell."),Object(n.b)("li",{parentName:"ul"},"If this function is defined, it will be passed a ",Object(n.b)("inlineCode",{parentName:"li"},"Cell")," object, from which you can return a value to use as the initial state, eg. ",Object(n.b)("inlineCode",{parentName:"li"},"cell => cell.row.original.initialCellState[cell.column.id]")))),Object(n.b)("li",{parentName:"ul"},Object(n.b)("inlineCode",{parentName:"li"},"autoResetRowState: Boolean"),Object(n.b)("ul",{parentName:"li"},Object(n.b)("li",{parentName:"ul"},"Defaults to ",Object(n.b)("inlineCode",{parentName:"li"},"true")),Object(n.b)("li",{parentName:"ul"},"When ",Object(n.b)("inlineCode",{parentName:"li"},"true"),", the ",Object(n.b)("inlineCode",{parentName:"li"},"rowState")," state will automatically reset if any of the following conditions are met:",Object(n.b)("ul",{parentName:"li"},Object(n.b)("li",{parentName:"ul"},Object(n.b)("inlineCode",{parentName:"li"},"data")," is changed"))),Object(n.b)("li",{parentName:"ul"},"To disable, set to ",Object(n.b)("inlineCode",{parentName:"li"},"false")),Object(n.b)("li",{parentName:"ul"},"For more information see the FAQ ",Object(n.b)("a",l({parentName:"li"},{href:"./faq#how-do-i-stop-my-table-state-from-automatically-resetting-when-my-data-changes"}),'"How do I stop my table state from automatically resetting when my data changes?"'))))),Object(n.b)("h3",{id:"instance-properties"},"Instance Properties"),Object(n.b)("p",null,"The following values are provided to the table ",Object(n.b)("inlineCode",{parentName:"p"},"instance"),":"),Object(n.b)("ul",null,Object(n.b)("li",{parentName:"ul"},Object(n.b)("inlineCode",{parentName:"li"},"setRowState: Function(rowPath: Array<string>, updater: Function | Any) => void"),Object(n.b)("ul",{parentName:"li"},Object(n.b)("li",{parentName:"ul"},"Use this function to programmatically update the state of a row."),Object(n.b)("li",{parentName:"ul"},Object(n.b)("inlineCode",{parentName:"li"},"updater")," can be a function or value. If a ",Object(n.b)("inlineCode",{parentName:"li"},"function")," is passed, it will receive the current value and expect a new one to be returned."))),Object(n.b)("li",{parentName:"ul"},Object(n.b)("inlineCode",{parentName:"li"},"setCellState: Function(rowPath: Array<string>, columnId: String, updater: Function | Any) => void"),Object(n.b)("ul",{parentName:"li"},Object(n.b)("li",{parentName:"ul"},"Use this function to programmatically update the cell of a row."),Object(n.b)("li",{parentName:"ul"},Object(n.b)("inlineCode",{parentName:"li"},"updater")," can be a function or value. If a ",Object(n.b)("inlineCode",{parentName:"li"},"function")," is passed, it will receive the current value and expect a new one to be returned.")))),Object(n.b)("h3",{id:"row-properties"},"Row Properties"),Object(n.b)("p",null,"The following additional properties are available on every ",Object(n.b)("strong",{parentName:"p"},"prepared")," ",Object(n.b)("inlineCode",{parentName:"p"},"row")," object returned by the table instance."),Object(n.b)("ul",null,Object(n.b)("li",{parentName:"ul"},Object(n.b)("inlineCode",{parentName:"li"},"state: Object"),Object(n.b)("ul",{parentName:"li"},Object(n.b)("li",{parentName:"ul"},"This is the state object for each row, pre-mapped to the row from the table state's ",Object(n.b)("inlineCode",{parentName:"li"},"rowState")," object via ",Object(n.b)("inlineCode",{parentName:"li"},"rowState[row.id]")),Object(n.b)("li",{parentName:"ul"},"May also contain a ",Object(n.b)("inlineCode",{parentName:"li"},"cellState")," key/value pair, which is used to provide individual cell states to this row's cells"))),Object(n.b)("li",{parentName:"ul"},Object(n.b)("inlineCode",{parentName:"li"},"setState: Function(updater: Function | any)"),Object(n.b)("ul",{parentName:"li"},Object(n.b)("li",{parentName:"ul"},"Use this function to programmatically update the state of a row."),Object(n.b)("li",{parentName:"ul"},Object(n.b)("inlineCode",{parentName:"li"},"updater")," can be a function or value. If a ",Object(n.b)("inlineCode",{parentName:"li"},"function")," is passed, it will receive the current value and expect a new one to be returned.")))),Object(n.b)("h3",{id:"cell-properties"},"Cell Properties"),Object(n.b)("p",null,"The following additional properties are available on every ",Object(n.b)("inlineCode",{parentName:"p"},"Cell")," object returned in an array of ",Object(n.b)("inlineCode",{parentName:"p"},"cells")," on every row object."),Object(n.b)("ul",null,Object(n.b)("li",{parentName:"ul"},Object(n.b)("inlineCode",{parentName:"li"},"state: Object"),Object(n.b)("ul",{parentName:"li"},Object(n.b)("li",{parentName:"ul"},"This is the state object for each cell, pre-mapped to the cell from the table state's ",Object(n.b)("inlineCode",{parentName:"li"},"rowState")," object via ",Object(n.b)("inlineCode",{parentName:"li"},"rowState[row.id].cellState[columnId]")))),Object(n.b)("li",{parentName:"ul"},Object(n.b)("inlineCode",{parentName:"li"},"setState: Function(updater: Function | any)"),Object(n.b)("ul",{parentName:"li"},Object(n.b)("li",{parentName:"ul"},"Use this function to programmatically update the state of a cell."),Object(n.b)("li",{parentName:"ul"},Object(n.b)("inlineCode",{parentName:"li"},"updater")," can be a function or value. If a ",Object(n.b)("inlineCode",{parentName:"li"},"function")," is passed, it will receive the current value and expect a new one to be returned.")))))}c&&c===Object(c)&&Object.isExtensible(c)&&!c.hasOwnProperty("__filemeta")&&Object.defineProperty(c,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"src/docs/api/useRowState.md"}}),c.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-docs-api-use-row-state-md-c7562436da6596c916cb.js.map