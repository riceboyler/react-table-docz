{"expireTime":9007200839136283000,"key":"gatsby-plugin-mdx-entire-payload-7e7a2a5c1db5502a580ff8b67dfd7944-","val":{"mdast":{"type":"root","children":[{"type":"import","value":"import DefaultLayout from \"/Users/jasonclark/Source/react-table-docz/node_modules/gatsby-theme-docz/src/base/Layout.js\"","position":{"start":{"line":3,"column":1,"offset":2},"end":{"line":3,"column":120,"offset":121},"indent":[]}},{"type":"export","default":true,"value":"export default DefaultLayout","position":{"start":{"line":5,"column":1,"offset":123},"end":{"line":5,"column":29,"offset":151},"indent":[]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"Quick Start","position":{"start":{"line":8,"column":3,"offset":156},"end":{"line":8,"column":14,"offset":167},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":154},"end":{"line":8,"column":14,"offset":167},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"As explained in the ","position":{"start":{"line":10,"column":1,"offset":169},"end":{"line":10,"column":21,"offset":189},"indent":[]}},{"type":"link","title":null,"url":"./concepts","children":[{"type":"text","value":"Concepts","position":{"start":{"line":10,"column":22,"offset":190},"end":{"line":10,"column":30,"offset":198},"indent":[]}}],"position":{"start":{"line":10,"column":21,"offset":189},"end":{"line":10,"column":43,"offset":211},"indent":[]}},{"type":"text","value":" document, react-table is a headless tool, meaning you'll have to build your own UI. We recognize this can be potentially daunting, so here's a very basic table to start with.","position":{"start":{"line":10,"column":43,"offset":211},"end":{"line":10,"column":218,"offset":386},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":169},"end":{"line":10,"column":218,"offset":386},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Define Row Shape","position":{"start":{"line":12,"column":4,"offset":391},"end":{"line":12,"column":20,"offset":407},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":388},"end":{"line":12,"column":20,"offset":407},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"When thinking about a table, you typically have a number of rows split into a number of columns. While table configurations can get far more complex with nested columns, subrows, etc. for this basic quick start, we need to define some data. Note that this data must be defined using ","position":{"start":{"line":14,"column":1,"offset":409},"end":{"line":14,"column":284,"offset":692},"indent":[]}},{"type":"link","title":null,"url":"https://reactjs.org/docs/hooks-reference.html#usememo","children":[{"type":"inlineCode","value":"React.useMemo","position":{"start":{"line":14,"column":285,"offset":693},"end":{"line":14,"column":300,"offset":708},"indent":[]}}],"position":{"start":{"line":14,"column":284,"offset":692},"end":{"line":14,"column":356,"offset":764},"indent":[]}},{"type":"text","value":" in order to take advantage of the power of memoization.","position":{"start":{"line":14,"column":356,"offset":764},"end":{"line":14,"column":412,"offset":820},"indent":[]}}],"position":{"start":{"line":14,"column":1,"offset":409},"end":{"line":14,"column":412,"offset":820},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"const data = React.useMemo(\n  () => [\n    {\n      col1: 'Hello',\n      col2: 'World',\n    },\n    {\n      col1: 'react-table',\n      col2: 'rocks',\n    },\n    {\n      col1: 'whatever',\n      col2: 'you want',\n    },\n  ],\n  []\n)","position":{"start":{"line":16,"column":1,"offset":822},"end":{"line":34,"column":4,"offset":1066},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Define Columns","position":{"start":{"line":36,"column":4,"offset":1071},"end":{"line":36,"column":18,"offset":1085},"indent":[]}}],"position":{"start":{"line":36,"column":1,"offset":1068},"end":{"line":36,"column":18,"offset":1085},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The first step to using react-table is to create a set of column definitions to pass into the ","position":{"start":{"line":38,"column":1,"offset":1087},"end":{"line":38,"column":95,"offset":1181},"indent":[]}},{"type":"inlineCode","value":"useTable","position":{"start":{"line":38,"column":95,"offset":1181},"end":{"line":38,"column":105,"offset":1191},"indent":[]}},{"type":"text","value":" hook. These columns must be defined using ","position":{"start":{"line":38,"column":105,"offset":1191},"end":{"line":38,"column":148,"offset":1234},"indent":[]}},{"type":"inlineCode","value":"React.useMemo","position":{"start":{"line":38,"column":148,"offset":1234},"end":{"line":38,"column":163,"offset":1249},"indent":[]}},{"type":"text","value":" in order to take advantage of the power of memoization.","position":{"start":{"line":38,"column":163,"offset":1249},"end":{"line":38,"column":219,"offset":1305},"indent":[]}}],"position":{"start":{"line":38,"column":1,"offset":1087},"end":{"line":38,"column":219,"offset":1305},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"const columns = React.useMemo(\n  () => [\n    {\n      Header: 'Column 1',\n      accessor: 'col1', // accessor is the \"key\" in the data\n    },\n    {\n      Header: 'Column 2',\n      accessor: 'col2',\n    },\n  ],\n  []\n)","position":{"start":{"line":40,"column":1,"offset":1307},"end":{"line":54,"column":4,"offset":1540},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Implement ","position":{"start":{"line":56,"column":4,"offset":1545},"end":{"line":56,"column":14,"offset":1555},"indent":[]}},{"type":"inlineCode","value":"useTable","position":{"start":{"line":56,"column":14,"offset":1555},"end":{"line":56,"column":24,"offset":1565},"indent":[]}},{"type":"text","value":" hook","position":{"start":{"line":56,"column":24,"offset":1565},"end":{"line":56,"column":29,"offset":1570},"indent":[]}}],"position":{"start":{"line":56,"column":1,"offset":1542},"end":{"line":56,"column":29,"offset":1570},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Now that you have the basic ","position":{"start":{"line":58,"column":1,"offset":1572},"end":{"line":58,"column":29,"offset":1600},"indent":[]}},{"type":"inlineCode","value":"columns","position":{"start":{"line":58,"column":29,"offset":1600},"end":{"line":58,"column":38,"offset":1609},"indent":[]}},{"type":"text","value":" and ","position":{"start":{"line":58,"column":38,"offset":1609},"end":{"line":58,"column":43,"offset":1614},"indent":[]}},{"type":"inlineCode","value":"data","position":{"start":{"line":58,"column":43,"offset":1614},"end":{"line":58,"column":49,"offset":1620},"indent":[]}},{"type":"text","value":" defined, you can pass those into ","position":{"start":{"line":58,"column":49,"offset":1620},"end":{"line":58,"column":83,"offset":1654},"indent":[]}},{"type":"inlineCode","value":"useTable","position":{"start":{"line":58,"column":83,"offset":1654},"end":{"line":58,"column":93,"offset":1664},"indent":[]}},{"type":"text","value":" and retrieve the properties you need.","position":{"start":{"line":58,"column":93,"offset":1664},"end":{"line":58,"column":131,"offset":1702},"indent":[]}}],"position":{"start":{"line":58,"column":1,"offset":1572},"end":{"line":58,"column":131,"offset":1702},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"const {\n  getTableProps,\n  getTableBodyProps,\n  headerGroups,\n  rows,\n  prepareRow,\n} = useTable({ columns, data })","position":{"start":{"line":60,"column":1,"offset":1704},"end":{"line":68,"column":4,"offset":1837},"indent":[1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"If you're new to JavaScript (especially ES2015+), this syntax may look a little strange. The lefthand side of the assigment is using ","position":{"start":{"line":70,"column":1,"offset":1839},"end":{"line":70,"column":134,"offset":1972},"indent":[]}},{"type":"link","title":null,"url":"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment","children":[{"type":"text","value":"object destructuring","position":{"start":{"line":70,"column":135,"offset":1973},"end":{"line":70,"column":155,"offset":1993},"indent":[]}}],"position":{"start":{"line":70,"column":134,"offset":1972},"end":{"line":70,"column":258,"offset":2096},"indent":[]}},{"type":"text","value":" to extract the properties we need that are returned from the ","position":{"start":{"line":70,"column":258,"offset":2096},"end":{"line":70,"column":320,"offset":2158},"indent":[]}},{"type":"inlineCode","value":"useTable","position":{"start":{"line":70,"column":320,"offset":2158},"end":{"line":70,"column":330,"offset":2168},"indent":[]}},{"type":"text","value":" hook (or function). On the right hand side, at a minimum, ","position":{"start":{"line":70,"column":330,"offset":2168},"end":{"line":70,"column":389,"offset":2227},"indent":[]}},{"type":"inlineCode","value":"useTable","position":{"start":{"line":70,"column":389,"offset":2227},"end":{"line":70,"column":399,"offset":2237},"indent":[]}},{"type":"text","value":" needs to be provided with an object containing the memoized columns and data that we created above.","position":{"start":{"line":70,"column":399,"offset":2237},"end":{"line":70,"column":499,"offset":2337},"indent":[]}}],"position":{"start":{"line":70,"column":1,"offset":1839},"end":{"line":70,"column":499,"offset":2337},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Build a basic UI structure","position":{"start":{"line":72,"column":4,"offset":2342},"end":{"line":72,"column":30,"offset":2368},"indent":[]}}],"position":{"start":{"line":72,"column":1,"offset":2339},"end":{"line":72,"column":30,"offset":2368},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"OK, so that's great, we've implemented the hook, but we still don't have a table to show, right? Let's use the properties returned from ","position":{"start":{"line":74,"column":1,"offset":2370},"end":{"line":74,"column":137,"offset":2506},"indent":[]}},{"type":"inlineCode","value":"useTable","position":{"start":{"line":74,"column":137,"offset":2506},"end":{"line":74,"column":147,"offset":2516},"indent":[]}},{"type":"text","value":" to build a basic table structure.","position":{"start":{"line":74,"column":147,"offset":2516},"end":{"line":74,"column":181,"offset":2550},"indent":[]}}],"position":{"start":{"line":74,"column":1,"offset":2370},"end":{"line":74,"column":181,"offset":2550},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"return (\n  <table {...getTableProps()}>\n    <thead>\n      {headerGroups.map(headerGroup => (\n        <tr {...headerGroup.getHeaderGroupProps()}>\n          {headerGroup.headers.map(column => (\n            <th {...column.getHeaderProps()}>{column.render('Header')}</th>\n          ))}\n        </tr>\n      ))}\n    </thead>\n    <tbody {...getTableBodyProps()}>\n      {rows.map(row => {\n        prepareRow(row)\n        return (\n          <tr {...row.getRowProps()}>\n            {row.cells.map(cell => {\n              return <td {...cell.getCellProps()}>{cell.render('Cell')}</td>\n            })}\n          </tr>\n        )\n      })}\n    </tbody>\n  </table>\n)","position":{"start":{"line":76,"column":1,"offset":2552},"end":{"line":102,"column":4,"offset":3221},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Again, if you're relatively new to JavaScript (or ES2015+ syntax), you may wonder, \"What is with all the ...s?\". This is the ","position":{"start":{"line":104,"column":1,"offset":3223},"end":{"line":104,"column":126,"offset":3348},"indent":[]}},{"type":"link","title":null,"url":"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax","children":[{"type":"text","value":"spread syntax","position":{"start":{"line":104,"column":127,"offset":3349},"end":{"line":104,"column":140,"offset":3362},"indent":[]}}],"position":{"start":{"line":104,"column":126,"offset":3348},"end":{"line":104,"column":232,"offset":3454},"indent":[]}},{"type":"text","value":" that ","position":{"start":{"line":104,"column":232,"offset":3454},"end":{"line":104,"column":238,"offset":3460},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"spreads","position":{"start":{"line":104,"column":239,"offset":3461},"end":{"line":104,"column":246,"offset":3468},"indent":[]}}],"position":{"start":{"line":104,"column":238,"offset":3460},"end":{"line":104,"column":247,"offset":3469},"indent":[]}},{"type":"text","value":" all properties of an object (or array) without having to manually extract them all. So, with the first row, ","position":{"start":{"line":104,"column":247,"offset":3469},"end":{"line":104,"column":356,"offset":3578},"indent":[]}},{"type":"inlineCode","value":"<table {...getRowProps()}>","position":{"start":{"line":104,"column":356,"offset":3578},"end":{"line":104,"column":384,"offset":3606},"indent":[]}},{"type":"text","value":" will return a ","position":{"start":{"line":104,"column":384,"offset":3606},"end":{"line":104,"column":399,"offset":3621},"indent":[]}},{"type":"inlineCode","value":"table","position":{"start":{"line":104,"column":399,"offset":3621},"end":{"line":104,"column":406,"offset":3628},"indent":[]}},{"type":"text","value":" element with all of the properties returned by ","position":{"start":{"line":104,"column":406,"offset":3628},"end":{"line":104,"column":454,"offset":3676},"indent":[]}},{"type":"inlineCode","value":"getTableProps()","position":{"start":{"line":104,"column":454,"offset":3676},"end":{"line":104,"column":471,"offset":3693},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":104,"column":471,"offset":3693},"end":{"line":104,"column":472,"offset":3694},"indent":[]}}],"position":{"start":{"line":104,"column":1,"offset":3223},"end":{"line":104,"column":472,"offset":3694},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Final Result","position":{"start":{"line":106,"column":4,"offset":3699},"end":{"line":106,"column":16,"offset":3711},"indent":[]}}],"position":{"start":{"line":106,"column":1,"offset":3696},"end":{"line":106,"column":16,"offset":3711},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"If we put all of this together, we should get a very basic (boring) table. (","position":{"start":{"line":108,"column":1,"offset":3713},"end":{"line":108,"column":77,"offset":3789},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"Styles added just to make it a little more attractive...","position":{"start":{"line":108,"column":78,"offset":3790},"end":{"line":108,"column":134,"offset":3846},"indent":[]}}],"position":{"start":{"line":108,"column":77,"offset":3789},"end":{"line":108,"column":135,"offset":3847},"indent":[]}},{"type":"text","value":")","position":{"start":{"line":108,"column":135,"offset":3847},"end":{"line":108,"column":136,"offset":3848},"indent":[]}}],"position":{"start":{"line":108,"column":1,"offset":3713},"end":{"line":108,"column":136,"offset":3848},"indent":[]}},{"type":"paragraph","children":[{"type":"emphasis","children":[{"type":"text","value":"The following example is a live component, so as you make changes in the code, it should update the table at the top.","position":{"start":{"line":110,"column":2,"offset":3851},"end":{"line":110,"column":119,"offset":3968},"indent":[]}}],"position":{"start":{"line":110,"column":1,"offset":3850},"end":{"line":110,"column":120,"offset":3969},"indent":[]}}],"position":{"start":{"line":110,"column":1,"offset":3850},"end":{"line":110,"column":120,"offset":3969},"indent":[]}},{"type":"import","value":"import { Playground } from 'docz'\nimport { useTable } from 'react-table'","position":{"start":{"line":112,"column":1,"offset":3971},"end":{"line":113,"column":39,"offset":4043},"indent":[1]}},{"type":"jsx","value":"<Playground>\n  {() => {\n    const data = React.useMemo(\n      () => [\n        {\n          col1: 'Hello',\n          col2: 'World',\n        },\n        {\n          col1: 'react-table',\n          col2: 'rocks',\n        },\n        {\n          col1: 'whatever',\n          col2: 'you want',\n        },\n      ],\n      []\n    )\n    const columns = React.useMemo(\n      () => [\n        {\n          Header: 'Column 1',\n          accessor: 'col1', // accessor is the \"key\" in the data\n        },\n        {\n          Header: 'Column 2',\n          accessor: 'col2',\n        },\n      ],\n      []\n    )\n    const {\n      getTableProps,\n      getTableBodyProps,\n      headerGroups,\n      rows,\n      prepareRow,\n    } = useTable({ columns, data })\n    return (\n      <table {...getTableProps()} style={{ border: 'solid 1px blue'}}>\n        <thead>\n          {headerGroups.map(headerGroup => (\n            <tr {...headerGroup.getHeaderGroupProps()}>\n              {headerGroup.headers.map(column => (\n                <th {...column.getHeaderProps()} style={{ borderBottom: 'solid 3px red', background: 'aliceblue', color: 'black', fontWeight: 'bold'}}>{column.render('Header')}</th>\n              ))}\n            </tr>\n          ))}\n        </thead>\n        <tbody {...getTableBodyProps()}>\n          {rows.map(row => {\n            prepareRow(row)\n            return (\n              <tr {...row.getRowProps()}>\n                {row.cells.map(cell => {\n                  return <td {...cell.getCellProps()} style={{ padding: '10px', border: 'solid 1px gray', background: 'papayawhip'}}>{cell.render('Cell')}</td>\n                })}\n              </tr>\n            )\n          })}\n        </tbody>\n      </table>\n    )\n  }}\n</Playground>","position":{"start":{"line":115,"column":1,"offset":4045},"end":{"line":180,"column":14,"offset":5763},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"export","value":"export const _frontmatter = {}","position":{"start":{"line":183,"column":1,"offset":5766},"end":{"line":183,"column":31,"offset":5796},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":183,"column":31,"offset":5796}}},"scopeImports":[],"scopeIdentifiers":[],"rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\nimport DefaultLayout from \"/Users/jasonclark/Source/react-table-docz/node_modules/gatsby-theme-docz/src/base/Layout.js\"\nimport { Playground } from 'docz'\nimport { useTable } from 'react-table'\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"quick-start\"\n    }}>{`Quick Start`}</h1>\n    <p>{`As explained in the `}<a parentName=\"p\" {...{\n        \"href\": \"./concepts\"\n      }}>{`Concepts`}</a>{` document, react-table is a headless tool, meaning you'll have to build your own UI. We recognize this can be potentially daunting, so here's a very basic table to start with.`}</p>\n    <h2 {...{\n      \"id\": \"define-row-shape\"\n    }}>{`Define Row Shape`}</h2>\n    <p>{`When thinking about a table, you typically have a number of rows split into a number of columns. While table configurations can get far more complex with nested columns, subrows, etc. for this basic quick start, we need to define some data. Note that this data must be defined using `}<a parentName=\"p\" {...{\n        \"href\": \"https://reactjs.org/docs/hooks-reference.html#usememo\"\n      }}><inlineCode parentName=\"a\">{`React.useMemo`}</inlineCode></a>{` in order to take advantage of the power of memoization.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const data = React.useMemo(\n  () => [\n    {\n      col1: 'Hello',\n      col2: 'World',\n    },\n    {\n      col1: 'react-table',\n      col2: 'rocks',\n    },\n    {\n      col1: 'whatever',\n      col2: 'you want',\n    },\n  ],\n  []\n)\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"define-columns\"\n    }}>{`Define Columns`}</h2>\n    <p>{`The first step to using react-table is to create a set of column definitions to pass into the `}<inlineCode parentName=\"p\">{`useTable`}</inlineCode>{` hook. These columns must be defined using `}<inlineCode parentName=\"p\">{`React.useMemo`}</inlineCode>{` in order to take advantage of the power of memoization.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const columns = React.useMemo(\n  () => [\n    {\n      Header: 'Column 1',\n      accessor: 'col1', // accessor is the \"key\" in the data\n    },\n    {\n      Header: 'Column 2',\n      accessor: 'col2',\n    },\n  ],\n  []\n)\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"implement-usetable-hook\"\n    }}>{`Implement `}<inlineCode parentName=\"h2\">{`useTable`}</inlineCode>{` hook`}</h2>\n    <p>{`Now that you have the basic `}<inlineCode parentName=\"p\">{`columns`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`data`}</inlineCode>{` defined, you can pass those into `}<inlineCode parentName=\"p\">{`useTable`}</inlineCode>{` and retrieve the properties you need.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const {\n  getTableProps,\n  getTableBodyProps,\n  headerGroups,\n  rows,\n  prepareRow,\n} = useTable({ columns, data })\n`}</code></pre>\n    <p>{`If you're new to JavaScript (especially ES2015+), this syntax may look a little strange. The lefthand side of the assigment is using `}<a parentName=\"p\" {...{\n        \"href\": \"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment\"\n      }}>{`object destructuring`}</a>{` to extract the properties we need that are returned from the `}<inlineCode parentName=\"p\">{`useTable`}</inlineCode>{` hook (or function). On the right hand side, at a minimum, `}<inlineCode parentName=\"p\">{`useTable`}</inlineCode>{` needs to be provided with an object containing the memoized columns and data that we created above.`}</p>\n    <h2 {...{\n      \"id\": \"build-a-basic-ui-structure\"\n    }}>{`Build a basic UI structure`}</h2>\n    <p>{`OK, so that's great, we've implemented the hook, but we still don't have a table to show, right? Let's use the properties returned from `}<inlineCode parentName=\"p\">{`useTable`}</inlineCode>{` to build a basic table structure.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`return (\n  <table {...getTableProps()}>\n    <thead>\n      {headerGroups.map(headerGroup => (\n        <tr {...headerGroup.getHeaderGroupProps()}>\n          {headerGroup.headers.map(column => (\n            <th {...column.getHeaderProps()}>{column.render('Header')}</th>\n          ))}\n        </tr>\n      ))}\n    </thead>\n    <tbody {...getTableBodyProps()}>\n      {rows.map(row => {\n        prepareRow(row)\n        return (\n          <tr {...row.getRowProps()}>\n            {row.cells.map(cell => {\n              return <td {...cell.getCellProps()}>{cell.render('Cell')}</td>\n            })}\n          </tr>\n        )\n      })}\n    </tbody>\n  </table>\n)\n`}</code></pre>\n    <p>{`Again, if you're relatively new to JavaScript (or ES2015+ syntax), you may wonder, \"What is with all the ...s?\". This is the `}<a parentName=\"p\" {...{\n        \"href\": \"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax\"\n      }}>{`spread syntax`}</a>{` that `}<em parentName=\"p\">{`spreads`}</em>{` all properties of an object (or array) without having to manually extract them all. So, with the first row, `}<inlineCode parentName=\"p\">{`<table {...getRowProps()}>`}</inlineCode>{` will return a `}<inlineCode parentName=\"p\">{`table`}</inlineCode>{` element with all of the properties returned by `}<inlineCode parentName=\"p\">{`getTableProps()`}</inlineCode>{`.`}</p>\n    <h2 {...{\n      \"id\": \"final-result\"\n    }}>{`Final Result`}</h2>\n    <p>{`If we put all of this together, we should get a very basic (boring) table. (`}<em parentName=\"p\">{`Styles added just to make it a little more attractive...`}</em>{`)`}</p>\n    <p><em parentName=\"p\">{`The following example is a live component, so as you make changes in the code, it should update the table at the top.`}</em></p>\n\n    <Playground __position={0} __code={'() => {\\n  const data = React.useMemo(\\n    () => [\\n      {\\n        col1: \\'Hello\\',\\n        col2: \\'World\\',\\n      },\\n      {\\n        col1: \\'react-table\\',\\n        col2: \\'rocks\\',\\n      },\\n      {\\n        col1: \\'whatever\\',\\n        col2: \\'you want\\',\\n      },\\n    ],\\n    [],\\n  )\\n  const columns = React.useMemo(\\n    () => [\\n      {\\n        Header: \\'Column 1\\',\\n        accessor: \\'col1\\', // accessor is the \\\"key\\\" in the data\\n      },\\n      {\\n        Header: \\'Column 2\\',\\n        accessor: \\'col2\\',\\n      },\\n    ],\\n    [],\\n  )\\n  const {\\n    getTableProps,\\n    getTableBodyProps,\\n    headerGroups,\\n    rows,\\n    prepareRow,\\n  } = useTable({ columns, data })\\n  return (\\n    <table {...getTableProps()} style={{ border: \\'solid 1px blue\\' }}>\\n      <thead>\\n        {headerGroups.map(headerGroup => (\\n          <tr {...headerGroup.getHeaderGroupProps()}>\\n            {headerGroup.headers.map(column => (\\n              <th\\n                {...column.getHeaderProps()}\\n                style={{\\n                  borderBottom: \\'solid 3px red\\',\\n                  background: \\'aliceblue\\',\\n                  color: \\'black\\',\\n                  fontWeight: \\'bold\\',\\n                }}\\n              >\\n                {column.render(\\'Header\\')}\\n              </th>\\n            ))}\\n          </tr>\\n        ))}\\n      </thead>\\n      <tbody {...getTableBodyProps()}>\\n        {rows.map(row => {\\n          prepareRow(row)\\n          return (\\n            <tr {...row.getRowProps()}>\\n              {row.cells.map(cell => {\\n                return (\\n                  <td\\n                    {...cell.getCellProps()}\\n                    style={{\\n                      padding: \\'10px\\',\\n                      border: \\'solid 1px gray\\',\\n                      background: \\'papayawhip\\',\\n                    }}\\n                  >\\n                    {cell.render(\\'Cell\\')}\\n                  </td>\\n                )\\n              })}\\n            </tr>\\n          )\\n        })}\\n      </tbody>\\n    </table>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      useTable\n    }} mdxType=\"Playground\">\n  {() => {\n        const data = React.useMemo(() => [{\n          col1: 'Hello',\n          col2: 'World'\n        }, {\n          col1: 'react-table',\n          col2: 'rocks'\n        }, {\n          col1: 'whatever',\n          col2: 'you want'\n        }], []);\n        const columns = React.useMemo(() => [{\n          Header: 'Column 1',\n          accessor: 'col1' // accessor is the \"key\" in the data\n\n        }, {\n          Header: 'Column 2',\n          accessor: 'col2'\n        }], []);\n        const {\n          getTableProps,\n          getTableBodyProps,\n          headerGroups,\n          rows,\n          prepareRow\n        } = useTable({\n          columns,\n          data\n        });\n        return <table {...getTableProps()} style={{\n          border: 'solid 1px blue'\n        }}>\n        <thead>\n          {headerGroups.map(headerGroup => <tr {...headerGroup.getHeaderGroupProps()}>\n              {headerGroup.headers.map(column => <th {...column.getHeaderProps()} style={{\n                borderBottom: 'solid 3px red',\n                background: 'aliceblue',\n                color: 'black',\n                fontWeight: 'bold'\n              }}>{column.render('Header')}</th>)}\n            </tr>)}\n        </thead>\n        <tbody {...getTableBodyProps()}>\n          {rows.map(row => {\n              prepareRow(row);\n              return <tr {...row.getRowProps()}>\n                {row.cells.map(cell => {\n                  return <td {...cell.getCellProps()} style={{\n                    padding: '10px',\n                    border: 'solid 1px gray',\n                    background: 'papayawhip'\n                  }}>{cell.render('Cell')}</td>;\n                })}\n              </tr>;\n            })}\n        </tbody>\n      </table>;\n      }}\n    </Playground>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}