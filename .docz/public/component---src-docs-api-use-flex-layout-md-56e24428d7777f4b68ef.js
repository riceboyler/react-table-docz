(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{hZSF:function(e,t,a){"use strict";a.r(t),a.d(t,"_frontmatter",(function(){return r})),a.d(t,"default",(function(){return s}));a("5hJT"),a("W1QL"),a("K/PF"),a("t91x"),a("75LO"),a("PJhk"),a("mXGw");var l=a("/FXl"),n=a("TjRS");a("aD51");function i(){return(i=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var a=arguments[t];for(var l in a)Object.prototype.hasOwnProperty.call(a,l)&&(e[l]=a[l])}return e}).apply(this,arguments)}var r={};void 0!==r&&r&&r===Object(r)&&Object.isExtensible(r)&&!r.hasOwnProperty("__filemeta")&&Object.defineProperty(r,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"src/docs/api/useFlexLayout.md"}});var o={_frontmatter:r},b=n.a;function s(e){var t=e.components,a=function(e,t){if(null==e)return{};var a,l,n={},i=Object.keys(e);for(l=0;l<i.length;l++)a=i[l],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,["components"]);return Object(l.b)(b,i({},o,a,{components:t,mdxType:"MDXLayout"}),Object(l.b)("h1",{id:"useflexlayout"},Object(l.b)("inlineCode",{parentName:"h1"},"useFlexLayout")),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"Plugin Hook"),Object(l.b)("li",{parentName:"ul"},"Optional")),Object(l.b)("p",null,Object(l.b)("inlineCode",{parentName:"p"},"useFlexLayout")," is a plugin hook that adds support for headers and cells to be rendered as ",Object(l.b)("inlineCode",{parentName:"p"},"inline-block")," ",Object(l.b)("inlineCode",{parentName:"p"},"div"),"s (or other non-table elements) with ",Object(l.b)("inlineCode",{parentName:"p"},"width")," being used as the flex-basis and flex-grow. This hook becomes useful when implementing both virtualized and resizable tables that must also be able to stretch to fill all available space."),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"NOTE:")," Although no additional options are needed for this plugin to work, the core column options ",Object(l.b)("inlineCode",{parentName:"p"},"width"),", ",Object(l.b)("inlineCode",{parentName:"p"},"minWidth")," and ",Object(l.b)("inlineCode",{parentName:"p"},"maxWidth")," are used to calculate column and cell widths and must be set:"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"minWidth")," is only used to limit column resizing. It does not define the minimum width for a column."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"width")," is used as both the ",Object(l.b)("inlineCode",{parentName:"li"},"flex-basis")," and ",Object(l.b)("inlineCode",{parentName:"li"},"flex-grow"),". This means that it essentially acts as both the minimum width and flex-ratio of the column."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"maxWidth")," is only used to limit column resizing. It does not define the maximum width for a column.")),Object(l.b)("p",null,Object(l.b)("a",i({parentName:"p"},{href:"#column-options"}),"See Column Options")," for more information on these options."),Object(l.b)("h3",{id:"row-properties"},"Row Properties"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"getRowProps"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Usage Required")),Object(l.b)("li",{parentName:"ul"},"This core prop getter is required to to enable absolute layout for rows")))),Object(l.b)("h3",{id:"cell-properties"},"Cell Properties"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"getCellProps"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Usage Required")),Object(l.b)("li",{parentName:"ul"},"This core prop getter is required to to enable absolute layout for rows cells")))),Object(l.b)("h3",{id:"headergroup-properties"},"HeaderGroup Properties"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"getHeaderGroupProps"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Usage Required")),Object(l.b)("li",{parentName:"ul"},"This core prop getter is required to to enable absolute layout for headers")))),Object(l.b)("h3",{id:"header-properties"},"Header Properties"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"getHeaderProps"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Usage Required")),Object(l.b)("li",{parentName:"ul"},"This core prop getter is required to to enable absolute layout for headers")))),Object(l.b)("h3",{id:"example-full-width-resizable-table"},"Example (Full Width Resizable Table)"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",i({parentName:"li"},{href:"https://github.com/tannerlinsley/react-table/tree/master/examples/full-width-resizable-table"}),"Source")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",i({parentName:"li"},{href:"https://codesandbox.io/s/github/tannerlinsley/react-table/tree/master/examples/full-width-resizable-table"}),"Open in CodeSandbox"))))}s&&s===Object(s)&&Object.isExtensible(s)&&!s.hasOwnProperty("__filemeta")&&Object.defineProperty(s,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"src/docs/api/useFlexLayout.md"}}),s.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-docs-api-use-flex-layout-md-56e24428d7777f4b68ef.js.map