{"version":3,"sources":["webpack:///../src/docs/api/useTable.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"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","file":"component---src-docs-api-use-table-md-173a20997f2941c4f640.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/jasonclark/Source/react-table-docz/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"usetable\"\n    }}><inlineCode parentName=\"h1\">{`useTable`}</inlineCode></h1>\n    <ul>\n      <li parentName=\"ul\">{`Required`}</li>\n    </ul>\n    <p><inlineCode parentName=\"p\">{`useTable`}</inlineCode>{` is the root hook for React Table. To use it, pass it with an options object with at least a `}<inlineCode parentName=\"p\">{`columns`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`data`}</inlineCode>{` value, followed by any React Table compatible hooks you want to use.`}</p>\n    <h3 {...{\n      \"id\": \"table-options\"\n    }}>{`Table Options`}</h3>\n    <p>{`The following options are supported via the main options object passed to `}<inlineCode parentName=\"p\">{`useTable(options)`}</inlineCode></p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`columns: Array<Column>`}</inlineCode><ul parentName=\"li\">\n          <li parentName=\"ul\">{`Required`}</li>\n          <li parentName=\"ul\">{`Must be `}<strong parentName=\"li\">{`memoized`}</strong></li>\n          <li parentName=\"ul\">{`The core columns configuration object for the entire table.`}</li>\n          <li parentName=\"ul\">{`Supports nested `}<inlineCode parentName=\"li\">{`columns`}</inlineCode>{` arrays via the column's `}<inlineCode parentName=\"li\">{`columns`}</inlineCode>{` key, eg. `}<inlineCode parentName=\"li\">{`[{ Header: 'My Group', columns: [...] }]`}</inlineCode></li>\n        </ul></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`data: Array<any>`}</inlineCode><ul parentName=\"li\">\n          <li parentName=\"ul\">{`Required`}</li>\n          <li parentName=\"ul\">{`Must be `}<strong parentName=\"li\">{`memoized`}</strong></li>\n          <li parentName=\"ul\">{`The data array that you want to display on the table.`}</li>\n        </ul></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`initialState: Object`}</inlineCode><ul parentName=\"li\">\n          <li parentName=\"ul\">{`Optional`}</li>\n          <li parentName=\"ul\">{`The initial state object for the table.`}</li>\n          <li parentName=\"ul\">{`Upon table initialization, this object is `}<strong parentName=\"li\">{`merged over the table's `}<inlineCode parentName=\"strong\">{`defaultState`}</inlineCode>{` object`}</strong>{` (eg. `}<inlineCode parentName=\"li\">{`{...defaultState, ...initialState}`}</inlineCode>{`) that React Table and its hooks use to register default state to produce the final initial state object passed to the `}<inlineCode parentName=\"li\">{`React.useState`}</inlineCode>{` hook internally.`}</li>\n        </ul></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`initialState.hiddenColumns: Array<ColumnId: String>`}</inlineCode><ul parentName=\"li\">\n          <li parentName=\"ul\">{`Optional`}</li>\n          <li parentName=\"ul\">{`The initial state object for hidden columns`}</li>\n          <li parentName=\"ul\">{`If a column's ID is contained in this array, it will be hidden`}</li>\n        </ul></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`autoResetHiddenColumns: Boolean`}</inlineCode><ul parentName=\"li\">\n          <li parentName=\"ul\">{`Defaults to `}<inlineCode parentName=\"li\">{`true`}</inlineCode></li>\n          <li parentName=\"ul\">{`When `}<inlineCode parentName=\"li\">{`true`}</inlineCode>{`, the `}<inlineCode parentName=\"li\">{`hiddenColumns`}</inlineCode>{` state will automatically reset if any of the following conditions are met:`}<ul parentName=\"li\">\n              <li parentName=\"ul\"><inlineCode parentName=\"li\">{`columns`}</inlineCode>{` is changed`}</li>\n            </ul></li>\n          <li parentName=\"ul\">{`To disable, set to `}<inlineCode parentName=\"li\">{`false`}</inlineCode></li>\n        </ul></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`stateReducer: Function(newState, action, prevState) => newState`}</inlineCode><ul parentName=\"li\">\n          <li parentName=\"ul\">{`Optional`}</li>\n          <li parentName=\"ul\">{`With every action that is dispatched to the table's internal `}<inlineCode parentName=\"li\">{`React.useReducer`}</inlineCode>{` instance, this reducer is called and is allowed to modify the final state object for updating.`}</li>\n          <li parentName=\"ul\">{`It is passed the `}<inlineCode parentName=\"li\">{`newState`}</inlineCode>{`, `}<inlineCode parentName=\"li\">{`action`}</inlineCode>{`, and `}<inlineCode parentName=\"li\">{`prevState`}</inlineCode>{` and is expected to either return the `}<inlineCode parentName=\"li\">{`newState`}</inlineCode>{` or a modified version of the `}<inlineCode parentName=\"li\">{`newState`}</inlineCode></li>\n          <li parentName=\"ul\">{`May also be used to \"control\" the state of the table, by overriding certain pieces of state regardless of the action.`}</li>\n        </ul></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`useControlledState: HookFunction(state) => controlledState`}</inlineCode><ul parentName=\"li\">\n          <li parentName=\"ul\">{`Optional`}</li>\n          <li parentName=\"ul\">{`If you need to control part of the table state, this is the place to do it.`}</li>\n          <li parentName=\"ul\">{`This function is run on every single render, just like a hook and allows you to alter the final state of the table if necessary.`}</li>\n          <li parentName=\"ul\">{`You can use hooks inside of this function, but most of the time, we just suggest using `}<inlineCode parentName=\"li\">{`React.useMemo`}</inlineCode>{` to memoize your state overrides.`}</li>\n          <li parentName=\"ul\">{`See the FAQ `}<a parentName=\"li\" {...{\n              \"href\": \"../faq.md#how-can-i-manually-control-the-table-state\"\n            }}>{`\"How can I manually control the table state?\"`}</a>{` for a an example.`}</li>\n        </ul></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`defaultColumn: Object`}</inlineCode><ul parentName=\"li\">\n          <li parentName=\"ul\">{`Optional`}</li>\n          <li parentName=\"ul\">{`Defaults to `}<inlineCode parentName=\"li\">{`{}`}</inlineCode></li>\n          <li parentName=\"ul\">{`The default column object for every column passed to React Table.`}</li>\n          <li parentName=\"ul\">{`Column-specific properties will override the properties in this object, eg. `}<inlineCode parentName=\"li\">{`{ ...defaultColumn, ...userColumn }`}</inlineCode></li>\n          <li parentName=\"ul\">{`This is particularly useful for adding global column properties. For instance, when using the `}<inlineCode parentName=\"li\">{`useFilters`}</inlineCode>{` plugin hook, add a default `}<inlineCode parentName=\"li\">{`Filter`}</inlineCode>{` renderer for every column, eg.`}<inlineCode parentName=\"li\">{`{ Filter: MyDefaultFilterComponent }`}</inlineCode></li>\n        </ul></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`initialRowStateKey: String`}</inlineCode><ul parentName=\"li\">\n          <li parentName=\"ul\">{`Optional`}</li>\n          <li parentName=\"ul\">{`Defaults to `}<inlineCode parentName=\"li\">{`initialState`}</inlineCode></li>\n          <li parentName=\"ul\">{`This key is used to look for the initial state of a row when initializing the `}<inlineCode parentName=\"li\">{`rowState`}</inlineCode>{` for a`}<inlineCode parentName=\"li\">{`data`}</inlineCode>{` array.`}</li>\n          <li parentName=\"ul\">{`If the value located at `}<inlineCode parentName=\"li\">{`row[initialRowStateKey]`}</inlineCode>{` is falsey, `}<inlineCode parentName=\"li\">{`{}`}</inlineCode>{` will be used instead.`}</li>\n        </ul></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`getSubRows: Function(row, relativeIndex) => Rows[]`}</inlineCode><ul parentName=\"li\">\n          <li parentName=\"ul\">{`Optional`}</li>\n          <li parentName=\"ul\">{`Must be `}<strong parentName=\"li\">{`memoized`}</strong></li>\n          <li parentName=\"ul\">{`Defaults to `}<inlineCode parentName=\"li\">{`(row) => row.subRows || []`}</inlineCode></li>\n          <li parentName=\"ul\">{`Use this function to change how React Table detects subrows. You could even use this function to generate sub rows if you want.`}</li>\n          <li parentName=\"ul\">{`By default, it will attempt to return the `}<inlineCode parentName=\"li\">{`subRows`}</inlineCode>{` property on the row, or an empty array if that is not found.`}</li>\n        </ul></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`getRowId: Function(row, relativeIndex, ?parent) => string`}</inlineCode><ul parentName=\"li\">\n          <li parentName=\"ul\">{`Use this function to change how React Table detects unique rows and also how it constructs each row's underlying `}<inlineCode parentName=\"li\">{`id`}</inlineCode>{` property.`}</li>\n          <li parentName=\"ul\">{`Optional`}</li>\n          <li parentName=\"ul\">{`Must be `}<strong parentName=\"li\">{`memoized`}</strong></li>\n          <li parentName=\"ul\">{`Defaults to `}<inlineCode parentName=\"li\">{`(row, relativeIndex, parent) => parent ? [parent.id, relativeIndex].join('.') : relativeIndex`}</inlineCode></li>\n        </ul></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`debug: Bool`}</inlineCode><ul parentName=\"li\">\n          <li parentName=\"ul\">{`Optional`}</li>\n          <li parentName=\"ul\">{`A flag to turn on debug mode.`}</li>\n          <li parentName=\"ul\">{`Defaults to `}<inlineCode parentName=\"li\">{`false`}</inlineCode></li>\n        </ul></li>\n    </ul>\n    <h3 {...{\n      \"id\": \"column-options\"\n    }}>{`Column Options`}</h3>\n    <p>{`The following options are supported on any column object you can pass to `}<inlineCode parentName=\"p\">{`columns`}</inlineCode>{`.`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`accessor: String | Function(originalRow, rowIndex) => any`}</inlineCode><ul parentName=\"li\">\n          <li parentName=\"ul\"><strong parentName=\"li\">{`Required`}</strong></li>\n          <li parentName=\"ul\">{`This string/function is used to build the data model for your column.`}</li>\n          <li parentName=\"ul\">{`The data returned by an accessor should be `}<strong parentName=\"li\">{`primitive`}</strong>{` and sortable.`}</li>\n          <li parentName=\"ul\">{`If a string is passed, the column's value will be looked up on the original row via that key, eg. If your column's accessor is `}<inlineCode parentName=\"li\">{`firstName`}</inlineCode>{` then its value would be read from `}<inlineCode parentName=\"li\">{`row['firstName']`}</inlineCode>{`. You can also specify deeply nested values with accessors like `}<inlineCode parentName=\"li\">{`info.hobbies`}</inlineCode>{` or even `}<inlineCode parentName=\"li\">{`address[0].street`}</inlineCode></li>\n          <li parentName=\"ul\">{`If a function is passed, the column's value will be looked up on the original row using this accessor function, eg. If your column's accessor is `}<inlineCode parentName=\"li\">{`row => row.firstName`}</inlineCode>{`, then its value would be determined by passing the row to this function and using the resulting value.`}</li>\n          <li parentName=\"ul\">{`Technically speaking, this field isn't required if you have a unique `}<inlineCode parentName=\"li\">{`id`}</inlineCode>{` for a column. This is used for things like expander or row selection columns. `}<strong parentName=\"li\">{`Warning`}</strong>{`: Only omit `}<inlineCode parentName=\"li\">{`accessor`}</inlineCode>{` if you really know what you're doing.`}</li>\n        </ul></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`id: String`}</inlineCode><ul parentName=\"li\">\n          <li parentName=\"ul\"><strong parentName=\"li\">{`Required if `}<inlineCode parentName=\"strong\">{`accessor`}</inlineCode>{` is a function`}</strong></li>\n          <li parentName=\"ul\">{`This is the unique ID for the column. It is used by reference in things like sorting, grouping, filtering etc.`}</li>\n          <li parentName=\"ul\">{`If a `}<strong parentName=\"li\">{`string`}</strong>{` accessor is used, it defaults as the column ID, but can be overridden if necessary.`}</li>\n        </ul></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`columns: Array<Column>`}</inlineCode><ul parentName=\"li\">\n          <li parentName=\"ul\">{`Optional`}</li>\n          <li parentName=\"ul\">{`A nested array of columns.`}</li>\n          <li parentName=\"ul\">{`If defined, the column will act as a header group. Columns can be recursively nested as much as needed.`}</li>\n        </ul></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`Header: String | Function | React.Component => JSX`}</inlineCode><ul parentName=\"li\">\n          <li parentName=\"ul\">{`Optional`}</li>\n          <li parentName=\"ul\">{`Defaults to `}<inlineCode parentName=\"li\">{`() => null`}</inlineCode></li>\n          <li parentName=\"ul\">{`Receives the table instance and column model as props`}</li>\n          <li parentName=\"ul\">{`Must either be a `}<strong parentName=\"li\">{`string or return valid JSX`}</strong></li>\n          <li parentName=\"ul\">{`If a function/component is passed, it will be used for formatting the header value, eg. You can use a `}<inlineCode parentName=\"li\">{`Header`}</inlineCode>{` function to dynamically format the header using any table or column state.`}</li>\n        </ul></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`Cell: Function | React.Component => JSX`}</inlineCode><ul parentName=\"li\">\n          <li parentName=\"ul\">{`Optional`}</li>\n          <li parentName=\"ul\">{`Defaults to `}<inlineCode parentName=\"li\">{`({ cell: { value } }) => String(value)`}</inlineCode></li>\n          <li parentName=\"ul\">{`Receives the table instance and cell model as props`}</li>\n          <li parentName=\"ul\">{`Must return valid JSX`}</li>\n          <li parentName=\"ul\">{`This function (or component) is primarily used for formatting the column value, eg. If your column accessor returns a date object, you can use a `}<inlineCode parentName=\"li\">{`Cell`}</inlineCode>{` function to format that date to a readable format.`}</li>\n        </ul></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`width: Int`}</inlineCode><ul parentName=\"li\">\n          <li parentName=\"ul\">{`Optional`}</li>\n          <li parentName=\"ul\">{`Defaults to `}<inlineCode parentName=\"li\">{`150`}</inlineCode></li>\n          <li parentName=\"ul\">{`Specifies the width for the column (when using non-table-element layouts)`}</li>\n        </ul></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`minWidth: Int`}</inlineCode><ul parentName=\"li\">\n          <li parentName=\"ul\">{`Optional`}</li>\n          <li parentName=\"ul\">{`Defaults to `}<inlineCode parentName=\"li\">{`0`}</inlineCode></li>\n          <li parentName=\"ul\">{`Specifies the minimum width for the column (when using non-table-element layouts)`}</li>\n          <li parentName=\"ul\">{`Specifically useful when using plugin hooks that allow the user to resize column widths`}</li>\n        </ul></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`maxWidth: Int`}</inlineCode><ul parentName=\"li\">\n          <li parentName=\"ul\">{`Optional`}</li>\n          <li parentName=\"ul\">{`Defaults to `}<inlineCode parentName=\"li\">{`0`}</inlineCode></li>\n          <li parentName=\"ul\">{`Specifies the maximum width for the column (when using non-table-element layouts)`}</li>\n          <li parentName=\"ul\">{`Specifically useful when using plugin hooks that allow the user to resize column widths`}</li>\n        </ul></li>\n    </ul>\n    <h3 {...{\n      \"id\": \"instance-properties\"\n    }}>{`Instance Properties`}</h3>\n    <p>{`The following properties are available on the table instance returned from `}<inlineCode parentName=\"p\">{`useTable`}</inlineCode></p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`state: Object`}</inlineCode><ul parentName=\"li\">\n          <li parentName=\"ul\"><strong parentName=\"li\">{`Memoized`}</strong>{` - This object reference will not change unless the internal table state is modified.`}</li>\n          <li parentName=\"ul\">{`This is the final state object of the table, which is the product of the `}<inlineCode parentName=\"li\">{`initialState`}</inlineCode>{`, internal table reducer and (optionally) a custom `}<inlineCode parentName=\"li\">{`reducer`}</inlineCode>{` supplied by the user.`}</li>\n        </ul></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`columns: Array<Column>`}</inlineCode><ul parentName=\"li\">\n          <li parentName=\"ul\">{`A `}<strong parentName=\"li\">{`nested`}</strong>{` array of final column objects, `}<strong parentName=\"li\">{`similar in structure to the original columns configuration option`}</strong>{`.`}</li>\n          <li parentName=\"ul\">{`See `}<a parentName=\"li\" {...{\n              \"href\": \"#column-properties\"\n            }}>{`Column Properties`}</a>{` for more information`}</li>\n        </ul></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`allColumns: Array<Column>`}</inlineCode><ul parentName=\"li\">\n          <li parentName=\"ul\">{`A `}<strong parentName=\"li\">{`flat`}</strong>{` array of all final column objects.`}</li>\n          <li parentName=\"ul\">{`See `}<a parentName=\"li\" {...{\n              \"href\": \"#column-properties\"\n            }}>{`Column Properties`}</a>{` for more information`}</li>\n        </ul></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`visibleColumns: Array<Column>`}</inlineCode><ul parentName=\"li\">\n          <li parentName=\"ul\">{`A `}<strong parentName=\"li\">{`flat`}</strong>{` array of all visible column objects derived from `}<inlineCode parentName=\"li\">{`allColumns`}</inlineCode>{`.`}</li>\n          <li parentName=\"ul\">{`See `}<a parentName=\"li\" {...{\n              \"href\": \"#column-properties\"\n            }}>{`Column Properties`}</a>{` for more information`}</li>\n        </ul></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`headerGroups: Array<HeaderGroup>`}</inlineCode><ul parentName=\"li\">\n          <li parentName=\"ul\">{`An array of normalized header groups, each containing a flattened array of final column objects for that row.`}</li>\n          <li parentName=\"ul\"><strong parentName=\"li\">{`Some of these headers may be materialized as placeholders`}</strong></li>\n          <li parentName=\"ul\">{`See `}<a parentName=\"li\" {...{\n              \"href\": \"#headergroup-properties\"\n            }}>{`HeaderGroup Properties`}</a>{` for more information`}</li>\n        </ul></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`footerGroups: Array<HeaderGroup>`}</inlineCode><ul parentName=\"li\">\n          <li parentName=\"ul\">{`An array of normalized header groups, but in reverse order, each containing a flattened array of final column objects for that row.`}</li>\n          <li parentName=\"ul\"><strong parentName=\"li\">{`Some of these headers may be materialized as placeholders`}</strong></li>\n          <li parentName=\"ul\">{`See `}<a parentName=\"li\" {...{\n              \"href\": \"#headergroup-properties\"\n            }}>{`HeaderGroup Properties`}</a>{` for more information`}</li>\n        </ul></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`headers: Array<Column>`}</inlineCode><ul parentName=\"li\">\n          <li parentName=\"ul\">{`A `}<strong parentName=\"li\">{`nested`}</strong>{` array of final header objects, `}<strong parentName=\"li\">{`similar in structure to the original columns configuration option, but rebuilt for ordering`}</strong></li>\n          <li parentName=\"ul\">{`Each contains the headers that are displayed underneath it.`}</li>\n          <li parentName=\"ul\"><strong parentName=\"li\">{`Some of these headers may be materialized as placeholders`}</strong></li>\n          <li parentName=\"ul\">{`See `}<a parentName=\"li\" {...{\n              \"href\": \"#column-properties\"\n            }}>{`Column Properties`}</a>{` for more information`}</li>\n        </ul></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`flatHeaders[] Array<Column>`}</inlineCode><ul parentName=\"li\">\n          <li parentName=\"ul\">{`A `}<strong parentName=\"li\">{`flat`}</strong>{` array of final header objects found in each header group.`}</li>\n          <li parentName=\"ul\"><strong parentName=\"li\">{`Some of these headers may be materialized as placeholders`}</strong></li>\n          <li parentName=\"ul\">{`See `}<a parentName=\"li\" {...{\n              \"href\": \"#column-properties\"\n            }}>{`Column Properties`}</a>{` for more information`}</li>\n        </ul></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`rows: Array<Row>`}</inlineCode><ul parentName=\"li\">\n          <li parentName=\"ul\">{`An array of `}<strong parentName=\"li\">{`materialized row objects`}</strong>{` from the original `}<inlineCode parentName=\"li\">{`data`}</inlineCode>{` array and `}<inlineCode parentName=\"li\">{`columns`}</inlineCode>{` passed into the table options`}</li>\n          <li parentName=\"ul\">{`See `}<a parentName=\"li\" {...{\n              \"href\": \"#row-properties\"\n            }}>{`Row Properties`}</a>{` for more information`}</li>\n        </ul></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`getTableProps: Function(?props)`}</inlineCode><ul parentName=\"li\">\n          <li parentName=\"ul\"><strong parentName=\"li\">{`Required`}</strong></li>\n          <li parentName=\"ul\">{`This function is used to resolve any props needed for your table wrapper.`}</li>\n          <li parentName=\"ul\">{`Custom props may be passed. `}<strong parentName=\"li\">{`NOTE: Custom props will override built-in table props, so be careful!`}</strong></li>\n        </ul></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`getTableBodyProps: Function(?props)`}</inlineCode><ul parentName=\"li\">\n          <li parentName=\"ul\"><strong parentName=\"li\">{`Required`}</strong></li>\n          <li parentName=\"ul\">{`This function is used to resolve any props needed for your table body wrapper.`}</li>\n          <li parentName=\"ul\">{`Custom props may be passed. `}<strong parentName=\"li\">{`NOTE: Custom props will override built-in table body props, so be careful!`}</strong></li>\n        </ul></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`prepareRow: Function(Row)`}</inlineCode><ul parentName=\"li\">\n          <li parentName=\"ul\"><strong parentName=\"li\">{`Required`}</strong></li>\n          <li parentName=\"ul\">{`This function is responsible for lazily preparing a row for rendering. Any row that you intend to render in your table needs to be passed to this function `}<strong parentName=\"li\">{`before every render`}</strong>{`.`}</li>\n          <li parentName=\"ul\"><strong parentName=\"li\">{`Why?`}</strong>{` Since table data could potentially be very large, it can become very expensive to compute all of the necessary state for every row to be rendered regardless if it actually is rendered or not (for example if you are paginating or virtualizing the rows, you may only have a few rows visible at any given moment). This function allows only the rows you intend to display to be computed and prepped with the correct state.`}</li>\n        </ul></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`flatRows: Array<Row>`}</inlineCode><ul parentName=\"li\">\n          <li parentName=\"ul\">{`An array of all rows, including subRows which have been flattened into the order in which they were detected (depth first)`}</li>\n          <li parentName=\"ul\">{`This can be helpful in calculating total row counts that must include subRows`}</li>\n        </ul></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`totalColumnsWidth: Int`}</inlineCode><ul parentName=\"li\">\n          <li parentName=\"ul\">{`This is the total width of all visible columns (only available when using non-table-element layouts)`}</li>\n        </ul></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`toggleHideColumn: Function(columnId: String, ?value: Boolean) => void`}</inlineCode><ul parentName=\"li\">\n          <li parentName=\"ul\">{`This function can be used to toggle or set a column's hidden state`}</li>\n          <li parentName=\"ul\">{`Passing a `}<inlineCode parentName=\"li\">{`value`}</inlineCode>{` is optional. If passed, the hidden state will be set to that Boolean value.`}</li>\n          <li parentName=\"ul\">{`If a `}<inlineCode parentName=\"li\">{`value`}</inlineCode>{` is not passed, the visibility for this column will be toggled.`}</li>\n        </ul></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`setHiddenColumns: Function(Array<ColumnId: String> | Function(oldHiddenColumns) => Array<ColumnId: String>) => void`}</inlineCode><ul parentName=\"li\">\n          <li parentName=\"ul\">{`This function can be used to set the `}<inlineCode parentName=\"li\">{`hiddenColumns`}</inlineCode>{` state for the entire table.`}</li>\n          <li parentName=\"ul\">{`If a value is passed, `}<inlineCode parentName=\"li\">{`hiddenColumns`}</inlineCode>{` will be set to that value`}</li>\n          <li parentName=\"ul\">{`If a function is passed, it will received the previous `}<inlineCode parentName=\"li\">{`hiddenColumns`}</inlineCode>{` value and will be expected to return the new value.`}</li>\n        </ul></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`toggleHideAllColumns: Function(?value: Boolean) => void`}</inlineCode><ul parentName=\"li\">\n          <li parentName=\"ul\">{`This function can be used to toggle or set the visibility for all columns to `}<inlineCode parentName=\"li\">{`true`}</inlineCode>{` or `}<inlineCode parentName=\"li\">{`false`}</inlineCode></li>\n          <li parentName=\"ul\">{`If a value is not passed, the visibility for all columns will be toggled back and forth from `}<inlineCode parentName=\"li\">{`true`}</inlineCode>{` to `}<inlineCode parentName=\"li\">{`false`}</inlineCode></li>\n          <li parentName=\"ul\">{`If `}<inlineCode parentName=\"li\">{`true`}</inlineCode>{` is passed, all columns will be hidden`}</li>\n          <li parentName=\"ul\">{`If a `}<inlineCode parentName=\"li\">{`false`}</inlineCode>{` is passed, all columns will be visible`}</li>\n        </ul></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`getToggleHideAllColumnsProps: Function(userProps) => props`}</inlineCode><ul parentName=\"li\">\n          <li parentName=\"ul\">{`This function can be used to retrieve all necessary props to be placed on an `}<inlineCode parentName=\"li\">{`<input type='checkbox'>`}</inlineCode>{` component that will control the visibility of all columns`}</li>\n        </ul></li>\n    </ul>\n    <h3 {...{\n      \"id\": \"headergroup-properties\"\n    }}>{`HeaderGroup Properties`}</h3>\n    <p>{`The following additional properties are available on every `}<inlineCode parentName=\"p\">{`headerGroup`}</inlineCode>{` object returned by the table instance.`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`headers: Array<Column>`}</inlineCode><ul parentName=\"li\">\n          <li parentName=\"ul\"><strong parentName=\"li\">{`Required`}</strong></li>\n          <li parentName=\"ul\">{`The columns in this header group.`}</li>\n        </ul></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`getHeaderGroupProps: Function(?props)`}</inlineCode><ul parentName=\"li\">\n          <li parentName=\"ul\"><strong parentName=\"li\">{`Required`}</strong></li>\n          <li parentName=\"ul\">{`This function is used to resolve any props needed for this header group's row.`}</li>\n          <li parentName=\"ul\">{`You can use the `}<inlineCode parentName=\"li\">{`getHeaderGroupProps`}</inlineCode>{` hook to extend its functionality.`}</li>\n          <li parentName=\"ul\">{`Custom props may be passed. `}<strong parentName=\"li\">{`NOTE: Custom props will override built-in table props, so be careful!`}</strong></li>\n        </ul></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`getFooterGroupProps: Function(?props)`}</inlineCode><ul parentName=\"li\">\n          <li parentName=\"ul\"><strong parentName=\"li\">{`Required`}</strong></li>\n          <li parentName=\"ul\">{`This function is used to resolve any props needed for this header group's footer row.`}</li>\n          <li parentName=\"ul\">{`You can use the `}<inlineCode parentName=\"li\">{`getFooterGroupProps`}</inlineCode>{` hook to extend its functionality.`}</li>\n          <li parentName=\"ul\">{`Custom props may be passed. `}<strong parentName=\"li\">{`NOTE: Custom props will override built-in table props, so be careful!`}</strong></li>\n        </ul></li>\n    </ul>\n    <h3 {...{\n      \"id\": \"column-properties\"\n    }}>{`Column Properties`}</h3>\n    <p>{`The following properties are available on every `}<inlineCode parentName=\"p\">{`Column`}</inlineCode>{` object returned by the table instance.`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`id: String`}</inlineCode><ul parentName=\"li\">\n          <li parentName=\"ul\">{`The resolved column ID from either the column's `}<inlineCode parentName=\"li\">{`accessor`}</inlineCode>{` or the column's hard-coded `}<inlineCode parentName=\"li\">{`id`}</inlineCode>{` property`}</li>\n        </ul></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`isVisible: Boolean`}</inlineCode><ul parentName=\"li\">\n          <li parentName=\"ul\">{`Whether the column should be currently visible or not.`}</li>\n          <li parentName=\"ul\">{`Columns that are not visible are still used for sorting, filtering, etc.`}</li>\n        </ul></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`render: Function(type: String | Function | Component, ?props)`}</inlineCode><ul parentName=\"li\">\n          <li parentName=\"ul\">{`This function is used to render content with the added context of a column.`}</li>\n          <li parentName=\"ul\">{`The entire table `}<inlineCode parentName=\"li\">{`instance`}</inlineCode>{` will be passed to the renderer with the addition of a `}<inlineCode parentName=\"li\">{`column`}</inlineCode>{` property, containing a reference to the column`}</li>\n          <li parentName=\"ul\">{`If `}<inlineCode parentName=\"li\">{`type`}</inlineCode>{` is a string, will render using the `}<inlineCode parentName=\"li\">{`column[type]`}</inlineCode>{` renderer. React Table ships with default `}<inlineCode parentName=\"li\">{`Header`}</inlineCode>{` and `}<inlineCode parentName=\"li\">{`Footer`}</inlineCode>{` renderers. Other renderers like `}<inlineCode parentName=\"li\">{`Filter`}</inlineCode>{` and `}<inlineCode parentName=\"li\">{`Aggregated`}</inlineCode>{` are available via plugin hooks.`}</li>\n          <li parentName=\"ul\">{`If a function or component is passed instead of a string, it will be be passed the table instance and column model as props and is expected to return any valid JSX.`}</li>\n        </ul></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`totalLeft: Int`}</inlineCode><ul parentName=\"li\">\n          <li parentName=\"ul\">{`This is the total width in pixels of all columns to the left of this column`}</li>\n          <li parentName=\"ul\">{`Specifically useful when using plugin hooks that allow the user to resize column widths`}</li>\n        </ul></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`totalWidth: Int`}</inlineCode><ul parentName=\"li\">\n          <li parentName=\"ul\">{`This is the total width in pixels for this column (if it is a leaf-column) or or all of it's sub-columns (if it is a column group)`}</li>\n          <li parentName=\"ul\">{`Specifically useful when using plugin hooks that allow the user to resize column widths`}</li>\n        </ul></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`getHeaderProps: Function(?props)`}</inlineCode><ul parentName=\"li\">\n          <li parentName=\"ul\"><strong parentName=\"li\">{`Required`}</strong></li>\n          <li parentName=\"ul\">{`This function is used to resolve any props needed for this column's header cell.`}</li>\n          <li parentName=\"ul\">{`You can use the `}<inlineCode parentName=\"li\">{`getHeaderProps`}</inlineCode>{` hook to extend its functionality.`}</li>\n          <li parentName=\"ul\">{`Custom props may be passed. `}<strong parentName=\"li\">{`NOTE: Custom props will override built-in table props, so be careful!`}</strong></li>\n        </ul></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`getFooterProps: Function(?props)`}</inlineCode><ul parentName=\"li\">\n          <li parentName=\"ul\"><strong parentName=\"li\">{`Required`}</strong></li>\n          <li parentName=\"ul\">{`This function is used to resolve any props needed for this column's footer cell.`}</li>\n          <li parentName=\"ul\">{`You can use the `}<inlineCode parentName=\"li\">{`getFooterProps`}</inlineCode>{` hook to extend its functionality.`}</li>\n          <li parentName=\"ul\">{`Custom props may be passed. `}<strong parentName=\"li\">{`NOTE: Custom props will override built-in table props, so be careful!`}</strong></li>\n        </ul></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`toggleHidden: Function(?hidden: Boolean) => void`}</inlineCode><ul parentName=\"li\">\n          <li parentName=\"ul\">{`This function can be used to hide or show this column.`}</li>\n          <li parentName=\"ul\">{`If no value is passed, the visibility of this column will be toggled.`}</li>\n          <li parentName=\"ul\">{`Optionally pass a value to set the visible.`}</li>\n        </ul></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`getToggleHiddenProps: Function(userProps) => props`}</inlineCode><ul parentName=\"li\">\n          <li parentName=\"ul\">{`This function can be used to retrieve all necessary props to be placed on an `}<inlineCode parentName=\"li\">{`<input type='checkbox'>`}</inlineCode>{` component that will control the visibility of this column.`}</li>\n        </ul></li>\n    </ul>\n    <h3 {...{\n      \"id\": \"row-properties\"\n    }}>{`Row Properties`}</h3>\n    <p>{`The following additional properties are available on every `}<inlineCode parentName=\"p\">{`row`}</inlineCode>{` object returned by the table instance.`}</p>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><inlineCode parentName=\"p\">{`cells: Array<Cell>`}</inlineCode></p>\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`An array of visible `}<inlineCode parentName=\"li\">{`Cell`}</inlineCode>{` objects containing properties and functions specific to the row and column it belongs to.`}</li>\n          <li parentName=\"ul\">{`These cells are normally intended for display`}</li>\n          <li parentName=\"ul\">{`See `}<a parentName=\"li\" {...{\n              \"href\": \"#cell-properties\"\n            }}>{`Cell Properties`}</a>{` for more information`}</li>\n        </ul>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><inlineCode parentName=\"p\">{`allCells: Array<Cell>`}</inlineCode></p>\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`An array of all `}<inlineCode parentName=\"li\">{`Cell`}</inlineCode>{` objects containing properties and functions specific to the row and column it belongs to.`}</li>\n          <li parentName=\"ul\">{`Not every cell contained here is guaranteed that it should be displayed and is made available here for convenience and advanced templating purposes.`}</li>\n          <li parentName=\"ul\">{`See `}<a parentName=\"li\" {...{\n              \"href\": \"#cell-properties\"\n            }}>{`Cell Properties`}</a>{` for more information`}</li>\n        </ul>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><inlineCode parentName=\"p\">{`values: Object<columnId: any>`}</inlineCode></p>\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`A map of this row's `}<strong parentName=\"li\">{`resolved`}</strong>{` values by columnId, eg. `}<inlineCode parentName=\"li\">{`{ firstName: 'Tanner', lastName: 'Linsley' }`}</inlineCode></li>\n        </ul>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><inlineCode parentName=\"p\">{`getRowProps: Function(?props)`}</inlineCode></p>\n        <ul parentName=\"li\">\n          <li parentName=\"ul\"><strong parentName=\"li\">{`Required`}</strong></li>\n          <li parentName=\"ul\">{`This function is used to resolve any props needed for this row.`}</li>\n          <li parentName=\"ul\">{`You can use the `}<inlineCode parentName=\"li\">{`getRowProps`}</inlineCode>{` hook to extend its functionality.`}</li>\n          <li parentName=\"ul\">{`Custom props may be passed. `}<strong parentName=\"li\">{`NOTE: Custom props will override built-in table props, so be careful!`}</strong></li>\n        </ul>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><inlineCode parentName=\"p\">{`index: Int`}</inlineCode></p>\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`The index of the original row in the `}<inlineCode parentName=\"li\">{`data`}</inlineCode>{` array that was passed to `}<inlineCode parentName=\"li\">{`useTable`}</inlineCode>{`. If this row is a subRow, it is the original index within the parent row's subRows array`}</li>\n        </ul>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><inlineCode parentName=\"p\">{`original: Object`}</inlineCode></p>\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`The original row object from the `}<inlineCode parentName=\"li\">{`data`}</inlineCode>{` array that was used to materialize this row.`}</li>\n        </ul>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><inlineCode parentName=\"p\">{`subRows: Array<Row>`}</inlineCode></p>\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`If subRows were detect on the original data object, this will be an array of those materialized row objects.`}</li>\n        </ul>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><inlineCode parentName=\"p\">{`state: Object`}</inlineCode></p>\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`The current state of the row. It's lifespan is attached to that of the original `}<inlineCode parentName=\"li\">{`data`}</inlineCode>{` array. When the raw `}<inlineCode parentName=\"li\">{`data`}</inlineCode>{` is changed, this state value is reset to the row's initial value (using the `}<inlineCode parentName=\"li\">{`initialRowStateKey`}</inlineCode>{` option).`}</li>\n          <li parentName=\"ul\">{`Can be updated via `}<inlineCode parentName=\"li\">{`instance.setRowState`}</inlineCode>{` or the row's `}<inlineCode parentName=\"li\">{`setState`}</inlineCode>{` function.`}</li>\n        </ul>\n      </li>\n    </ul>\n    <h3 {...{\n      \"id\": \"cell-properties\"\n    }}>{`Cell Properties`}</h3>\n    <p>{`The following additional properties are available on every `}<inlineCode parentName=\"p\">{`Cell`}</inlineCode>{` object returned in an array of `}<inlineCode parentName=\"p\">{`cells`}</inlineCode>{` on every row object.`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`column: Column`}</inlineCode><ul parentName=\"li\">\n          <li parentName=\"ul\">{`The corresponding column object for this cell`}</li>\n        </ul></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`row: Row`}</inlineCode><ul parentName=\"li\">\n          <li parentName=\"ul\">{`The corresponding row object for this cell`}</li>\n        </ul></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`value: any`}</inlineCode><ul parentName=\"li\">\n          <li parentName=\"ul\">{`The `}<strong parentName=\"li\">{`resolved`}</strong>{` value for this cell.`}</li>\n          <li parentName=\"ul\">{`By default, this value is displayed on the table via the default `}<inlineCode parentName=\"li\">{`Cell`}</inlineCode>{` renderer. To override the way a cell displays`}</li>\n        </ul></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`getCellProps: Function(?props)`}</inlineCode><ul parentName=\"li\">\n          <li parentName=\"ul\"><strong parentName=\"li\">{`Required`}</strong></li>\n          <li parentName=\"ul\">{`This function is used to resolve any props needed for this cell.`}</li>\n          <li parentName=\"ul\">{`You can use the `}<inlineCode parentName=\"li\">{`getCellProps`}</inlineCode>{` hook to extend its functionality.`}</li>\n          <li parentName=\"ul\">{`Custom props may be passed. `}<strong parentName=\"li\">{`NOTE: Custom props will override built-in table props, so be careful!`}</strong></li>\n        </ul></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`render: Function(type: String | Function | Component, ?props)`}</inlineCode><ul parentName=\"li\">\n          <li parentName=\"ul\"><strong parentName=\"li\">{`Required`}</strong></li>\n          <li parentName=\"ul\">{`This function is used to render content with the added context of a cell.`}</li>\n          <li parentName=\"ul\">{`The entire table `}<inlineCode parentName=\"li\">{`instance`}</inlineCode>{` will be passed to the renderer with the addition of `}<inlineCode parentName=\"li\">{`column`}</inlineCode>{`, `}<inlineCode parentName=\"li\">{`row`}</inlineCode>{` and `}<inlineCode parentName=\"li\">{`cell`}</inlineCode>{` properties, containing a reference to each respective item.`}</li>\n          <li parentName=\"ul\">{`If `}<inlineCode parentName=\"li\">{`type`}</inlineCode>{` is a string, will render using the `}<inlineCode parentName=\"li\">{`column[type]`}</inlineCode>{` renderer. React Table ships with a default `}<inlineCode parentName=\"li\">{`Cell`}</inlineCode>{` renderer. Other renderers like `}<inlineCode parentName=\"li\">{`Aggregated`}</inlineCode>{` are available via hooks like `}<inlineCode parentName=\"li\">{`useFilters`}</inlineCode>{`.`}</li>\n          <li parentName=\"ul\">{`If a function or component is passed instead of a string, it will be be passed the table instance and cell model as props and is expected to return any valid JSX.`}</li>\n        </ul></li>\n    </ul>\n    <h3 {...{\n      \"id\": \"example\"\n    }}>{`Example`}</h3>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://github.com/tannerlinsley/react-table/tree/master/examples/basic\"\n        }}>{`Source`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://codesandbox.io/s/github/tannerlinsley/react-table/tree/master/examples/basic\"\n        }}>{`Open in CodeSandbox`}</a></li>\n    </ul>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}