{"version":3,"sources":["webpack:///../src/docs/api/useRowState.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"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","file":"component---src-docs-api-use-row-state-md-c7562436da6596c916cb.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/jasonclark/Source/react-table-docz/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"userowstate\"\n    }}><inlineCode parentName=\"h1\">{`useRowState`}</inlineCode></h1>\n    <ul>\n      <li parentName=\"ul\">{`Plugin Hook`}</li>\n      <li parentName=\"ul\">{`Optional`}</li>\n    </ul>\n    <p><inlineCode parentName=\"p\">{`useRowState`}</inlineCode>{` is a plugin hook that implements `}<strong parentName=\"p\">{`basic state management for `}<em parentName=\"strong\">{`prepared`}</em>{` rows and their cells`}</strong>{`.`}</p>\n    <h3 {...{\n      \"id\": \"table-options\"\n    }}>{`Table Options`}</h3>\n    <p>{`The following options are supported via the main options object passed to `}<inlineCode parentName=\"p\">{`useTable(options)`}</inlineCode></p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`initialState.rowState: Object<RowPathKey:Object<any, cellState: {columnId: Object}>>`}</inlineCode><ul parentName=\"li\">\n          <li parentName=\"ul\">{`Optional`}</li>\n          <li parentName=\"ul\">{`Defaults to `}<inlineCode parentName=\"li\">{`{}`}</inlineCode></li>\n          <li parentName=\"ul\">{`If a row's ID is found in this array, it will have the state of the value corresponding to that key.`}</li>\n          <li parentName=\"ul\">{`Individual row states can contain anything, but they also contain a `}<inlineCode parentName=\"li\">{`cellState`}</inlineCode>{` key, which provides cell-level state based on column ID's to every\n`}<strong parentName=\"li\">{`prepared`}</strong>{` cell in the table.`}</li>\n        </ul></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`initialRowStateAccessor: Function(originalRow) => Object<any>`}</inlineCode><ul parentName=\"li\">\n          <li parentName=\"ul\">{`Optional`}</li>\n          <li parentName=\"ul\">{`Defaults to: `}<inlineCode parentName=\"li\">{`row => ({})`}</inlineCode></li>\n          <li parentName=\"ul\">{`This function should return the initial state for a row.`}</li>\n          <li parentName=\"ul\">{`If this function is defined, it will be passed a `}<inlineCode parentName=\"li\">{`Row`}</inlineCode>{` object, from which you can return a value to use as the initial state, eg. `}<inlineCode parentName=\"li\">{`row => row.original.initialState`}</inlineCode></li>\n        </ul></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`initialCellStateAccessor: Function(originalRow) => Object<any>`}</inlineCode><ul parentName=\"li\">\n          <li parentName=\"ul\"><strong parentName=\"li\">{`Optional`}</strong></li>\n          <li parentName=\"ul\">{`Defaults to: `}<inlineCode parentName=\"li\">{`cell => ({})`}</inlineCode></li>\n          <li parentName=\"ul\">{`This function should return the initial state for a cell.`}</li>\n          <li parentName=\"ul\">{`If this function is defined, it will be passed a `}<inlineCode parentName=\"li\">{`Cell`}</inlineCode>{` object, from which you can return a value to use as the initial state, eg. `}<inlineCode parentName=\"li\">{`cell => cell.row.original.initialCellState[cell.column.id]`}</inlineCode></li>\n        </ul></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`autoResetRowState: Boolean`}</inlineCode><ul parentName=\"li\">\n          <li parentName=\"ul\">{`Defaults to `}<inlineCode parentName=\"li\">{`true`}</inlineCode></li>\n          <li parentName=\"ul\">{`When `}<inlineCode parentName=\"li\">{`true`}</inlineCode>{`, the `}<inlineCode parentName=\"li\">{`rowState`}</inlineCode>{` state will automatically reset if any of the following conditions are met:`}<ul parentName=\"li\">\n              <li parentName=\"ul\"><inlineCode parentName=\"li\">{`data`}</inlineCode>{` is changed`}</li>\n            </ul></li>\n          <li parentName=\"ul\">{`To disable, set to `}<inlineCode parentName=\"li\">{`false`}</inlineCode></li>\n          <li parentName=\"ul\">{`For more information see the FAQ `}<a parentName=\"li\" {...{\n              \"href\": \"./faq#how-do-i-stop-my-table-state-from-automatically-resetting-when-my-data-changes\"\n            }}>{`\"How do I stop my table state from automatically resetting when my data changes?\"`}</a></li>\n        </ul></li>\n    </ul>\n    <h3 {...{\n      \"id\": \"instance-properties\"\n    }}>{`Instance Properties`}</h3>\n    <p>{`The following values are provided to the table `}<inlineCode parentName=\"p\">{`instance`}</inlineCode>{`:`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`setRowState: Function(rowPath: Array<string>, updater: Function | Any) => void`}</inlineCode><ul parentName=\"li\">\n          <li parentName=\"ul\">{`Use this function to programmatically update the state of a row.`}</li>\n          <li parentName=\"ul\"><inlineCode parentName=\"li\">{`updater`}</inlineCode>{` can be a function or value. If a `}<inlineCode parentName=\"li\">{`function`}</inlineCode>{` is passed, it will receive the current value and expect a new one to be returned.`}</li>\n        </ul></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`setCellState: Function(rowPath: Array<string>, columnId: String, updater: Function | Any) => void`}</inlineCode><ul parentName=\"li\">\n          <li parentName=\"ul\">{`Use this function to programmatically update the cell of a row.`}</li>\n          <li parentName=\"ul\"><inlineCode parentName=\"li\">{`updater`}</inlineCode>{` can be a function or value. If a `}<inlineCode parentName=\"li\">{`function`}</inlineCode>{` is passed, it will receive the current value and expect a new one to be returned.`}</li>\n        </ul></li>\n    </ul>\n    <h3 {...{\n      \"id\": \"row-properties\"\n    }}>{`Row Properties`}</h3>\n    <p>{`The following additional properties are available on every `}<strong parentName=\"p\">{`prepared`}</strong>{` `}<inlineCode parentName=\"p\">{`row`}</inlineCode>{` object returned by the table instance.`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`state: Object`}</inlineCode><ul parentName=\"li\">\n          <li parentName=\"ul\">{`This is the state object for each row, pre-mapped to the row from the table state's `}<inlineCode parentName=\"li\">{`rowState`}</inlineCode>{` object via `}<inlineCode parentName=\"li\">{`rowState[row.id]`}</inlineCode></li>\n          <li parentName=\"ul\">{`May also contain a `}<inlineCode parentName=\"li\">{`cellState`}</inlineCode>{` key/value pair, which is used to provide individual cell states to this row's cells`}</li>\n        </ul></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`setState: Function(updater: Function | any)`}</inlineCode><ul parentName=\"li\">\n          <li parentName=\"ul\">{`Use this function to programmatically update the state of a row.`}</li>\n          <li parentName=\"ul\"><inlineCode parentName=\"li\">{`updater`}</inlineCode>{` can be a function or value. If a `}<inlineCode parentName=\"li\">{`function`}</inlineCode>{` is passed, it will receive the current value and expect a new one to be returned.`}</li>\n        </ul></li>\n    </ul>\n    <h3 {...{\n      \"id\": \"cell-properties\"\n    }}>{`Cell Properties`}</h3>\n    <p>{`The following additional properties are available on every `}<inlineCode parentName=\"p\">{`Cell`}</inlineCode>{` object returned in an array of `}<inlineCode parentName=\"p\">{`cells`}</inlineCode>{` on every row object.`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`state: Object`}</inlineCode><ul parentName=\"li\">\n          <li parentName=\"ul\">{`This is the state object for each cell, pre-mapped to the cell from the table state's `}<inlineCode parentName=\"li\">{`rowState`}</inlineCode>{` object via `}<inlineCode parentName=\"li\">{`rowState[row.id].cellState[columnId]`}</inlineCode></li>\n        </ul></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`setState: Function(updater: Function | any)`}</inlineCode><ul parentName=\"li\">\n          <li parentName=\"ul\">{`Use this function to programmatically update the state of a cell.`}</li>\n          <li parentName=\"ul\"><inlineCode parentName=\"li\">{`updater`}</inlineCode>{` can be a function or value. If a `}<inlineCode parentName=\"li\">{`function`}</inlineCode>{` is passed, it will receive the current value and expect a new one to be returned.`}</li>\n        </ul></li>\n    </ul>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}