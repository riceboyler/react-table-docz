{"version":3,"sources":["webpack:///../src/docs/api/useGlobalFilter.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"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","file":"component---src-docs-api-use-global-filter-md-410ee1ef190ce83dc334.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/jasonclark/Source/react-table-docz/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"useglobalfilter\"\n    }}><inlineCode parentName=\"h1\">{`useGlobalFilter`}</inlineCode></h1>\n    <ul>\n      <li parentName=\"ul\">{`Plugin Hook`}</li>\n      <li parentName=\"ul\">{`Optional`}</li>\n    </ul>\n    <p><inlineCode parentName=\"p\">{`useGlobalFilter`}</inlineCode>{` is the hook that implements `}<strong parentName=\"p\">{`global row filtering`}</strong>{` and can even be used in conjunction with `}<inlineCode parentName=\"p\">{`useFilters`}</inlineCode>{`. It's also important to note that this hook can be used either `}<strong parentName=\"p\">{`before or after`}</strong>{` `}<inlineCode parentName=\"p\">{`useFilters`}</inlineCode>{`, depending on the performance characteristics you want to code for.`}</p>\n    <h3 {...{\n      \"id\": \"table-options\"\n    }}>{`Table Options`}</h3>\n    <p>{`The following options are supported via the main options object passed to `}<inlineCode parentName=\"p\">{`useTable(options)`}</inlineCode></p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`initialState.globalFilter: any`}</inlineCode><ul parentName=\"li\">\n          <li parentName=\"ul\">{`Must be `}<strong parentName=\"li\">{`memoized`}</strong></li>\n          <li parentName=\"ul\">{`An array of objects containing columnId's and their corresponding filter values. This information is stored in state since the table is allowed to manipulate the filter through user interaction.`}</li>\n        </ul></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`globalFilter: String | Function`}</inlineCode><ul parentName=\"li\">\n          <li parentName=\"ul\">{`Optional`}</li>\n          <li parentName=\"ul\">{`Defaults to `}<inlineCode parentName=\"li\">{`text`}</inlineCode></li>\n          <li parentName=\"ul\">{`The resolved function from the this string/function will be used to filter the table's data.`}<ul parentName=\"li\">\n              <li parentName=\"ul\">{`If a `}<inlineCode parentName=\"li\">{`string`}</inlineCode>{` is passed, the function with that name located on either the custom `}<inlineCode parentName=\"li\">{`filterTypes`}</inlineCode>{` option or the built-in filtering types object will be used. If`}</li>\n              <li parentName=\"ul\">{`If a `}<inlineCode parentName=\"li\">{`function`}</inlineCode>{` is passed, it will be used directly.`}</li>\n            </ul></li>\n          <li parentName=\"ul\">{`For more information on filter types, see Filtering`}</li>\n          <li parentName=\"ul\">{`If a `}<strong parentName=\"li\">{`function`}</strong>{` is passed, it must be `}<strong parentName=\"li\">{`memoized`}</strong></li>\n        </ul></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`manualGlobalFilter: Bool`}</inlineCode><ul parentName=\"li\">\n          <li parentName=\"ul\">{`Enables filter detection functionality, but does not automatically perform row filtering.`}</li>\n          <li parentName=\"ul\">{`Turn this on if you wish to implement your own row filter outside of the table (eg. server-side or manual row grouping/nesting)`}</li>\n        </ul></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`disableGlobalFilter: Bool`}</inlineCode><ul parentName=\"li\">\n          <li parentName=\"ul\">{`Disables global filtering for every column in the entire table.`}</li>\n        </ul></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`filterTypes: Object<filterKey: filterType>`}</inlineCode><ul parentName=\"li\">\n          <li parentName=\"ul\">{`Must be `}<strong parentName=\"li\">{`memoized`}</strong></li>\n          <li parentName=\"ul\">{`Allows overriding or adding additional filter types for the table to use. If the globalFilter type isn't found on this object, it will default to using the built-in filter types.`}</li>\n          <li parentName=\"ul\">{`For more information on filter types, see Filtering`}</li>\n        </ul></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`autoResetGlobalFilter: Boolean`}</inlineCode><ul parentName=\"li\">\n          <li parentName=\"ul\">{`Defaults to `}<inlineCode parentName=\"li\">{`true`}</inlineCode></li>\n          <li parentName=\"ul\">{`When `}<inlineCode parentName=\"li\">{`true`}</inlineCode>{`, the `}<inlineCode parentName=\"li\">{`globalFilter`}</inlineCode>{` state will automatically reset if any of the following conditions are met:`}<ul parentName=\"li\">\n              <li parentName=\"ul\"><inlineCode parentName=\"li\">{`data`}</inlineCode>{` is changed`}</li>\n            </ul></li>\n          <li parentName=\"ul\">{`To disable, set to `}<inlineCode parentName=\"li\">{`false`}</inlineCode></li>\n          <li parentName=\"ul\">{`For more information see the FAQ `}<a parentName=\"li\" {...{\n              \"href\": \"./faq#how-do-i-stop-my-table-state-from-automatically-resetting-when-my-data-changes\"\n            }}>{`\"How do I stop my table state from automatically resetting when my data changes?\"`}</a></li>\n        </ul></li>\n    </ul>\n    <h3 {...{\n      \"id\": \"column-options\"\n    }}>{`Column Options`}</h3>\n    <p>{`The following options are supported on any `}<inlineCode parentName=\"p\">{`Column`}</inlineCode>{` object passed to the `}<inlineCode parentName=\"p\">{`columns`}</inlineCode>{` option in `}<inlineCode parentName=\"p\">{`useTable()`}</inlineCode></p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`disableGlobalFilter: Bool`}</inlineCode><ul parentName=\"li\">\n          <li parentName=\"ul\">{`Optional`}</li>\n          <li parentName=\"ul\">{`If set to `}<inlineCode parentName=\"li\">{`true`}</inlineCode>{`, will disable global filtering for this column`}</li>\n        </ul></li>\n    </ul>\n    <h3 {...{\n      \"id\": \"instance-properties\"\n    }}>{`Instance Properties`}</h3>\n    <p>{`The following values are provided to the table `}<inlineCode parentName=\"p\">{`instance`}</inlineCode>{`:`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`rows: Array<Row>`}</inlineCode><ul parentName=\"li\">\n          <li parentName=\"ul\">{`An array of `}<strong parentName=\"li\">{`filtered`}</strong>{` rows.`}</li>\n        </ul></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`preGlobalFilteredRows: Array<Row>`}</inlineCode><ul parentName=\"li\">\n          <li parentName=\"ul\">{`The array of rows `}<strong parentName=\"li\">{`used right before filtering`}</strong>{`.`}</li>\n          <li parentName=\"ul\">{`Among many other use-cases, these rows are directly useful for building option lists in filters, since the resulting filtered `}<inlineCode parentName=\"li\">{`rows`}</inlineCode>{` do not contain every possible option.`}</li>\n        </ul></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`setGlobalFilter: Function(filterValue) => void`}</inlineCode><ul parentName=\"li\">\n          <li parentName=\"ul\">{`An instance-level function used to update the global filter value.`}</li>\n        </ul></li>\n    </ul>\n    <h3 {...{\n      \"id\": \"example\"\n    }}>{`Example`}</h3>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://github.com/tannerlinsley/react-table/tree/master/examples/filtering\"\n        }}>{`Source`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://codesandbox.io/s/github/tannerlinsley/react-table/tree/master/examples/filtering\"\n        }}>{`Open in CodeSandbox`}</a></li>\n    </ul>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}