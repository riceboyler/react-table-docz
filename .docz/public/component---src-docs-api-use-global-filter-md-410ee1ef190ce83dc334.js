(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{"65y7":function(e,t,l){"use strict";l.r(t),l.d(t,"_frontmatter",(function(){return r})),l.d(t,"default",(function(){return c}));l("5hJT"),l("W1QL"),l("K/PF"),l("t91x"),l("75LO"),l("PJhk"),l("mXGw");var n=l("/FXl"),a=l("TjRS");l("aD51");function i(){return(i=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var l=arguments[t];for(var n in l)Object.prototype.hasOwnProperty.call(l,n)&&(e[n]=l[n])}return e}).apply(this,arguments)}var r={};void 0!==r&&r&&r===Object(r)&&Object.isExtensible(r)&&!r.hasOwnProperty("__filemeta")&&Object.defineProperty(r,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"src/docs/api/useGlobalFilter.md"}});var o={_frontmatter:r},b=a.a;function c(e){var t=e.components,l=function(e,t){if(null==e)return{};var l,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)l=i[n],t.indexOf(l)>=0||(a[l]=e[l]);return a}(e,["components"]);return Object(n.b)(b,i({},o,l,{components:t,mdxType:"MDXLayout"}),Object(n.b)("h1",{id:"useglobalfilter"},Object(n.b)("inlineCode",{parentName:"h1"},"useGlobalFilter")),Object(n.b)("ul",null,Object(n.b)("li",{parentName:"ul"},"Plugin Hook"),Object(n.b)("li",{parentName:"ul"},"Optional")),Object(n.b)("p",null,Object(n.b)("inlineCode",{parentName:"p"},"useGlobalFilter")," is the hook that implements ",Object(n.b)("strong",{parentName:"p"},"global row filtering")," and can even be used in conjunction with ",Object(n.b)("inlineCode",{parentName:"p"},"useFilters"),". It's also important to note that this hook can be used either ",Object(n.b)("strong",{parentName:"p"},"before or after")," ",Object(n.b)("inlineCode",{parentName:"p"},"useFilters"),", depending on the performance characteristics you want to code for."),Object(n.b)("h3",{id:"table-options"},"Table Options"),Object(n.b)("p",null,"The following options are supported via the main options object passed to ",Object(n.b)("inlineCode",{parentName:"p"},"useTable(options)")),Object(n.b)("ul",null,Object(n.b)("li",{parentName:"ul"},Object(n.b)("inlineCode",{parentName:"li"},"initialState.globalFilter: any"),Object(n.b)("ul",{parentName:"li"},Object(n.b)("li",{parentName:"ul"},"Must be ",Object(n.b)("strong",{parentName:"li"},"memoized")),Object(n.b)("li",{parentName:"ul"},"An array of objects containing columnId's and their corresponding filter values. This information is stored in state since the table is allowed to manipulate the filter through user interaction."))),Object(n.b)("li",{parentName:"ul"},Object(n.b)("inlineCode",{parentName:"li"},"globalFilter: String | Function"),Object(n.b)("ul",{parentName:"li"},Object(n.b)("li",{parentName:"ul"},"Optional"),Object(n.b)("li",{parentName:"ul"},"Defaults to ",Object(n.b)("inlineCode",{parentName:"li"},"text")),Object(n.b)("li",{parentName:"ul"},"The resolved function from the this string/function will be used to filter the table's data.",Object(n.b)("ul",{parentName:"li"},Object(n.b)("li",{parentName:"ul"},"If a ",Object(n.b)("inlineCode",{parentName:"li"},"string")," is passed, the function with that name located on either the custom ",Object(n.b)("inlineCode",{parentName:"li"},"filterTypes")," option or the built-in filtering types object will be used. If"),Object(n.b)("li",{parentName:"ul"},"If a ",Object(n.b)("inlineCode",{parentName:"li"},"function")," is passed, it will be used directly."))),Object(n.b)("li",{parentName:"ul"},"For more information on filter types, see Filtering"),Object(n.b)("li",{parentName:"ul"},"If a ",Object(n.b)("strong",{parentName:"li"},"function")," is passed, it must be ",Object(n.b)("strong",{parentName:"li"},"memoized")))),Object(n.b)("li",{parentName:"ul"},Object(n.b)("inlineCode",{parentName:"li"},"manualGlobalFilter: Bool"),Object(n.b)("ul",{parentName:"li"},Object(n.b)("li",{parentName:"ul"},"Enables filter detection functionality, but does not automatically perform row filtering."),Object(n.b)("li",{parentName:"ul"},"Turn this on if you wish to implement your own row filter outside of the table (eg. server-side or manual row grouping/nesting)"))),Object(n.b)("li",{parentName:"ul"},Object(n.b)("inlineCode",{parentName:"li"},"disableGlobalFilter: Bool"),Object(n.b)("ul",{parentName:"li"},Object(n.b)("li",{parentName:"ul"},"Disables global filtering for every column in the entire table."))),Object(n.b)("li",{parentName:"ul"},Object(n.b)("inlineCode",{parentName:"li"},"filterTypes: Object<filterKey: filterType>"),Object(n.b)("ul",{parentName:"li"},Object(n.b)("li",{parentName:"ul"},"Must be ",Object(n.b)("strong",{parentName:"li"},"memoized")),Object(n.b)("li",{parentName:"ul"},"Allows overriding or adding additional filter types for the table to use. If the globalFilter type isn't found on this object, it will default to using the built-in filter types."),Object(n.b)("li",{parentName:"ul"},"For more information on filter types, see Filtering"))),Object(n.b)("li",{parentName:"ul"},Object(n.b)("inlineCode",{parentName:"li"},"autoResetGlobalFilter: Boolean"),Object(n.b)("ul",{parentName:"li"},Object(n.b)("li",{parentName:"ul"},"Defaults to ",Object(n.b)("inlineCode",{parentName:"li"},"true")),Object(n.b)("li",{parentName:"ul"},"When ",Object(n.b)("inlineCode",{parentName:"li"},"true"),", the ",Object(n.b)("inlineCode",{parentName:"li"},"globalFilter")," state will automatically reset if any of the following conditions are met:",Object(n.b)("ul",{parentName:"li"},Object(n.b)("li",{parentName:"ul"},Object(n.b)("inlineCode",{parentName:"li"},"data")," is changed"))),Object(n.b)("li",{parentName:"ul"},"To disable, set to ",Object(n.b)("inlineCode",{parentName:"li"},"false")),Object(n.b)("li",{parentName:"ul"},"For more information see the FAQ ",Object(n.b)("a",i({parentName:"li"},{href:"./faq#how-do-i-stop-my-table-state-from-automatically-resetting-when-my-data-changes"}),'"How do I stop my table state from automatically resetting when my data changes?"'))))),Object(n.b)("h3",{id:"column-options"},"Column Options"),Object(n.b)("p",null,"The following options are supported on any ",Object(n.b)("inlineCode",{parentName:"p"},"Column")," object passed to the ",Object(n.b)("inlineCode",{parentName:"p"},"columns")," option in ",Object(n.b)("inlineCode",{parentName:"p"},"useTable()")),Object(n.b)("ul",null,Object(n.b)("li",{parentName:"ul"},Object(n.b)("inlineCode",{parentName:"li"},"disableGlobalFilter: Bool"),Object(n.b)("ul",{parentName:"li"},Object(n.b)("li",{parentName:"ul"},"Optional"),Object(n.b)("li",{parentName:"ul"},"If set to ",Object(n.b)("inlineCode",{parentName:"li"},"true"),", will disable global filtering for this column")))),Object(n.b)("h3",{id:"instance-properties"},"Instance Properties"),Object(n.b)("p",null,"The following values are provided to the table ",Object(n.b)("inlineCode",{parentName:"p"},"instance"),":"),Object(n.b)("ul",null,Object(n.b)("li",{parentName:"ul"},Object(n.b)("inlineCode",{parentName:"li"},"rows: Array<Row>"),Object(n.b)("ul",{parentName:"li"},Object(n.b)("li",{parentName:"ul"},"An array of ",Object(n.b)("strong",{parentName:"li"},"filtered")," rows."))),Object(n.b)("li",{parentName:"ul"},Object(n.b)("inlineCode",{parentName:"li"},"preGlobalFilteredRows: Array<Row>"),Object(n.b)("ul",{parentName:"li"},Object(n.b)("li",{parentName:"ul"},"The array of rows ",Object(n.b)("strong",{parentName:"li"},"used right before filtering"),"."),Object(n.b)("li",{parentName:"ul"},"Among many other use-cases, these rows are directly useful for building option lists in filters, since the resulting filtered ",Object(n.b)("inlineCode",{parentName:"li"},"rows")," do not contain every possible option."))),Object(n.b)("li",{parentName:"ul"},Object(n.b)("inlineCode",{parentName:"li"},"setGlobalFilter: Function(filterValue) => void"),Object(n.b)("ul",{parentName:"li"},Object(n.b)("li",{parentName:"ul"},"An instance-level function used to update the global filter value.")))),Object(n.b)("h3",{id:"example"},"Example"),Object(n.b)("ul",null,Object(n.b)("li",{parentName:"ul"},Object(n.b)("a",i({parentName:"li"},{href:"https://github.com/tannerlinsley/react-table/tree/master/examples/filtering"}),"Source")),Object(n.b)("li",{parentName:"ul"},Object(n.b)("a",i({parentName:"li"},{href:"https://codesandbox.io/s/github/tannerlinsley/react-table/tree/master/examples/filtering"}),"Open in CodeSandbox"))))}c&&c===Object(c)&&Object.isExtensible(c)&&!c.hasOwnProperty("__filemeta")&&Object.defineProperty(c,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"src/docs/api/useGlobalFilter.md"}}),c.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-docs-api-use-global-filter-md-410ee1ef190ce83dc334.js.map