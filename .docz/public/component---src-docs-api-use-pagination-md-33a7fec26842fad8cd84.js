(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{"2bOh":function(e,t,a){"use strict";a.r(t),a.d(t,"_frontmatter",(function(){return b})),a.d(t,"default",(function(){return p}));a("5hJT"),a("W1QL"),a("K/PF"),a("t91x"),a("75LO"),a("PJhk"),a("mXGw");var n=a("/FXl"),i=a("TjRS");a("aD51");function l(){return(l=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var a=arguments[t];for(var n in a)Object.prototype.hasOwnProperty.call(a,n)&&(e[n]=a[n])}return e}).apply(this,arguments)}var b={};void 0!==b&&b&&b===Object(b)&&Object.isExtensible(b)&&!b.hasOwnProperty("__filemeta")&&Object.defineProperty(b,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"src/docs/api/usePagination.md"}});var r={_frontmatter:b},o=i.a;function p(e){var t=e.components,a=function(e,t){if(null==e)return{};var a,n,i={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,["components"]);return Object(n.b)(o,l({},r,a,{components:t,mdxType:"MDXLayout"}),Object(n.b)("h1",{id:"usepagination"},Object(n.b)("inlineCode",{parentName:"h1"},"usePagination")),Object(n.b)("ul",null,Object(n.b)("li",{parentName:"ul"},"Plugin Hook"),Object(n.b)("li",{parentName:"ul"},"Optional")),Object(n.b)("p",null,Object(n.b)("inlineCode",{parentName:"p"},"usePagination")," is the hook that implements ",Object(n.b)("strong",{parentName:"p"},"row pagination"),". It can be used for both client-side pagination or server-side pagination. For more information on pagination, see Pagination"),Object(n.b)("blockquote",null,Object(n.b)("p",{parentName:"blockquote"},Object(n.b)("strong",{parentName:"p"},"NOTE")," Some server-side pagination implementations do not use page index and instead use ",Object(n.b)("strong",{parentName:"p"},"token based pagination"),"! If that's the case, please use the ",Object(n.b)("inlineCode",{parentName:"p"},"useTokenPagination")," plugin instead.")),Object(n.b)("h3",{id:"table-options"},"Table Options"),Object(n.b)("p",null,"The following options are supported via the main options object passed to ",Object(n.b)("inlineCode",{parentName:"p"},"useTable(options)")),Object(n.b)("ul",null,Object(n.b)("li",{parentName:"ul"},Object(n.b)("inlineCode",{parentName:"li"},"initialState.pageSize: Int"),Object(n.b)("ul",{parentName:"li"},Object(n.b)("li",{parentName:"ul"},Object(n.b)("strong",{parentName:"li"},"Required")),Object(n.b)("li",{parentName:"ul"},"Defaults to ",Object(n.b)("inlineCode",{parentName:"li"},"10")),Object(n.b)("li",{parentName:"ul"},"Determines the amount of rows on any given page"))),Object(n.b)("li",{parentName:"ul"},Object(n.b)("inlineCode",{parentName:"li"},"initialState.pageIndex: Int"),Object(n.b)("ul",{parentName:"li"},Object(n.b)("li",{parentName:"ul"},Object(n.b)("strong",{parentName:"li"},"Required")),Object(n.b)("li",{parentName:"ul"},"Defaults to ",Object(n.b)("inlineCode",{parentName:"li"},"0")),Object(n.b)("li",{parentName:"ul"},"The index of the page that should be displayed via the ",Object(n.b)("inlineCode",{parentName:"li"},"page")," instance value"))),Object(n.b)("li",{parentName:"ul"},Object(n.b)("inlineCode",{parentName:"li"},"pageCount: Int"),Object(n.b)("ul",{parentName:"li"},Object(n.b)("li",{parentName:"ul"},Object(n.b)("strong",{parentName:"li"},"Required if ",Object(n.b)("inlineCode",{parentName:"strong"},"manualPagination")," is set to ",Object(n.b)("inlineCode",{parentName:"strong"},"true"))),Object(n.b)("li",{parentName:"ul"},"If ",Object(n.b)("inlineCode",{parentName:"li"},"manualPagination")," is ",Object(n.b)("inlineCode",{parentName:"li"},"true"),", then this value used to determine the amount of pages available. This amount is then used to materialize the ",Object(n.b)("inlineCode",{parentName:"li"},"pageOptions")," and also compute the ",Object(n.b)("inlineCode",{parentName:"li"},"canNextPage")," values on the table instance."))),Object(n.b)("li",{parentName:"ul"},Object(n.b)("inlineCode",{parentName:"li"},"manualPagination: Bool"),Object(n.b)("ul",{parentName:"li"},Object(n.b)("li",{parentName:"ul"},"Enables pagination functionality, but does not automatically perform row pagination."),Object(n.b)("li",{parentName:"ul"},"Turn this on if you wish to implement your own pagination outside of the table (eg. server-side pagination or any other manual pagination technique)"))),Object(n.b)("li",{parentName:"ul"},Object(n.b)("inlineCode",{parentName:"li"},"autoResetPage: Boolean"),Object(n.b)("ul",{parentName:"li"},Object(n.b)("li",{parentName:"ul"},"Defaults to ",Object(n.b)("inlineCode",{parentName:"li"},"true")),Object(n.b)("li",{parentName:"ul"},"When ",Object(n.b)("inlineCode",{parentName:"li"},"true"),", the ",Object(n.b)("inlineCode",{parentName:"li"},"pageIndex")," state will automatically reset if ",Object(n.b)("inlineCode",{parentName:"li"},"manualPagination")," is ",Object(n.b)("inlineCode",{parentName:"li"},"false")," and any of the following conditions are met:",Object(n.b)("ul",{parentName:"li"},Object(n.b)("li",{parentName:"ul"},Object(n.b)("inlineCode",{parentName:"li"},"data")," is changed"),Object(n.b)("li",{parentName:"ul"},Object(n.b)("inlineCode",{parentName:"li"},"manualSortBy")," is ",Object(n.b)("inlineCode",{parentName:"li"},"false")," and ",Object(n.b)("inlineCode",{parentName:"li"},"state.sortBy")," is changed"),Object(n.b)("li",{parentName:"ul"},Object(n.b)("inlineCode",{parentName:"li"},"manualGlobalFilter")," is ",Object(n.b)("inlineCode",{parentName:"li"},"false")," and ",Object(n.b)("inlineCode",{parentName:"li"},"state.globalFilter")," is changed"),Object(n.b)("li",{parentName:"ul"},Object(n.b)("inlineCode",{parentName:"li"},"manualFilters")," is ",Object(n.b)("inlineCode",{parentName:"li"},"false")," and ",Object(n.b)("inlineCode",{parentName:"li"},"state.filters")," is changed"),Object(n.b)("li",{parentName:"ul"},Object(n.b)("inlineCode",{parentName:"li"},"manualGroupBy")," is ",Object(n.b)("inlineCode",{parentName:"li"},"false")," and ",Object(n.b)("inlineCode",{parentName:"li"},"state.groupBy")," is changed"))),Object(n.b)("li",{parentName:"ul"},"To disable, set to ",Object(n.b)("inlineCode",{parentName:"li"},"false")),Object(n.b)("li",{parentName:"ul"},"For more information see the FAQ ",Object(n.b)("a",l({parentName:"li"},{href:"../faq.md#how-do-i-stop-my-table-state-from-automatically-resetting-when-my-data-changes"}),'"How do I stop my table state from automatically resetting when my data changes?"')))),Object(n.b)("li",{parentName:"ul"},Object(n.b)("inlineCode",{parentName:"li"},"paginateExpandedRows: Bool"),Object(n.b)("ul",{parentName:"li"},Object(n.b)("li",{parentName:"ul"},"Optional"),Object(n.b)("li",{parentName:"ul"},"Only applies when using the ",Object(n.b)("inlineCode",{parentName:"li"},"useExpanded")," plugin hook simultaneously"),Object(n.b)("li",{parentName:"ul"},"Defaults to ",Object(n.b)("inlineCode",{parentName:"li"},"true")),Object(n.b)("li",{parentName:"ul"},"If set to ",Object(n.b)("inlineCode",{parentName:"li"},"true"),", expanded rows are paginated along with normal rows. This results in stable page sizes across every page."),Object(n.b)("li",{parentName:"ul"},"If set to ",Object(n.b)("inlineCode",{parentName:"li"},"false"),", expanded rows will be spliced in after pagination. This means that the total number of rows in a page can potentially be larger than the page size, depending on how many subrows are expanded.")))),Object(n.b)("h3",{id:"instance-properties"},"Instance Properties"),Object(n.b)("p",null,"The following values are provided to the table ",Object(n.b)("inlineCode",{parentName:"p"},"instance"),":"),Object(n.b)("ul",null,Object(n.b)("li",{parentName:"ul"},Object(n.b)("inlineCode",{parentName:"li"},"state.pageIndex: Int"),Object(n.b)("ul",{parentName:"li"},Object(n.b)("li",{parentName:"ul"},"This is the current ",Object(n.b)("inlineCode",{parentName:"li"},"pageIndex")," value, located on the state."))),Object(n.b)("li",{parentName:"ul"},Object(n.b)("inlineCode",{parentName:"li"},"state.pageSize: Int"),Object(n.b)("ul",{parentName:"li"},Object(n.b)("li",{parentName:"ul"},"This is the current ",Object(n.b)("inlineCode",{parentName:"li"},"pageSize")," value, located on the state."))),Object(n.b)("li",{parentName:"ul"},Object(n.b)("inlineCode",{parentName:"li"},"page: Array<row>"),Object(n.b)("ul",{parentName:"li"},Object(n.b)("li",{parentName:"ul"},"An array of rows for the ",Object(n.b)("strong",{parentName:"li"},"current")," page, determined by the current ",Object(n.b)("inlineCode",{parentName:"li"},"pageIndex")," value."))),Object(n.b)("li",{parentName:"ul"},Object(n.b)("inlineCode",{parentName:"li"},"pageCount: Int"),Object(n.b)("ul",{parentName:"li"},Object(n.b)("li",{parentName:"ul"},"If ",Object(n.b)("inlineCode",{parentName:"li"},"manualPagination")," is set to ",Object(n.b)("inlineCode",{parentName:"li"},"false"),", this is the total amount of pages available in the table based on the current ",Object(n.b)("inlineCode",{parentName:"li"},"pageSize")," value"),Object(n.b)("li",{parentName:"ul"},"if ",Object(n.b)("inlineCode",{parentName:"li"},"manualPagination")," is set to ",Object(n.b)("inlineCode",{parentName:"li"},"true"),", this is merely the same ",Object(n.b)("inlineCode",{parentName:"li"},"pageCount")," option that was passed in the table options."))),Object(n.b)("li",{parentName:"ul"},Object(n.b)("inlineCode",{parentName:"li"},"pageOptions: Array<Int>"),Object(n.b)("ul",{parentName:"li"},Object(n.b)("li",{parentName:"ul"},"An array of zero-based index integers corresponding to available pages in the table."),Object(n.b)("li",{parentName:"ul"},"This can be useful for generating things like select interfaces for the user to select a page from a list, instead of manually paginating to the desired page."))),Object(n.b)("li",{parentName:"ul"},Object(n.b)("inlineCode",{parentName:"li"},"canPreviousPage: Bool"),Object(n.b)("ul",{parentName:"li"},Object(n.b)("li",{parentName:"ul"},"If there are pages and the current ",Object(n.b)("inlineCode",{parentName:"li"},"pageIndex")," is greater than ",Object(n.b)("inlineCode",{parentName:"li"},"0"),", this will be ",Object(n.b)("inlineCode",{parentName:"li"},"true")))),Object(n.b)("li",{parentName:"ul"},Object(n.b)("inlineCode",{parentName:"li"},"canNextPage:"),Object(n.b)("ul",{parentName:"li"},Object(n.b)("li",{parentName:"ul"},"If there are pages and the current ",Object(n.b)("inlineCode",{parentName:"li"},"pageIndex")," is less than ",Object(n.b)("inlineCode",{parentName:"li"},"pageCount"),", this will be ",Object(n.b)("inlineCode",{parentName:"li"},"true")))),Object(n.b)("li",{parentName:"ul"},Object(n.b)("inlineCode",{parentName:"li"},"gotoPage: Function(pageIndex)"),Object(n.b)("ul",{parentName:"li"},Object(n.b)("li",{parentName:"ul"},"This function, when called with a valid ",Object(n.b)("inlineCode",{parentName:"li"},"pageIndex"),", will set ",Object(n.b)("inlineCode",{parentName:"li"},"pageIndex")," to that value."),Object(n.b)("li",{parentName:"ul"},"If the aginateassed index is outside of the valid ",Object(n.b)("inlineCode",{parentName:"li"},"pageIndex")," range, then this function will do nothing."))),Object(n.b)("li",{parentName:"ul"},Object(n.b)("inlineCode",{parentName:"li"},"previousPage: Function"),Object(n.b)("ul",{parentName:"li"},Object(n.b)("li",{parentName:"ul"},"This function decreases ",Object(n.b)("inlineCode",{parentName:"li"},"state.pageIndex")," by one."),Object(n.b)("li",{parentName:"ul"},"If there are no pages or ",Object(n.b)("inlineCode",{parentName:"li"},"canPreviousPage")," is false, this function will do nothing."))),Object(n.b)("li",{parentName:"ul"},Object(n.b)("inlineCode",{parentName:"li"},"nextPage: Function"),Object(n.b)("ul",{parentName:"li"},Object(n.b)("li",{parentName:"ul"},"This function increases ",Object(n.b)("inlineCode",{parentName:"li"},"state.pageIndex")," by one."),Object(n.b)("li",{parentName:"ul"},"If there are no pages or ",Object(n.b)("inlineCode",{parentName:"li"},"canNextPage")," is false, this function will do nothing."))),Object(n.b)("li",{parentName:"ul"},Object(n.b)("inlineCode",{parentName:"li"},"setPageSize: Function(pageSize)"),Object(n.b)("ul",{parentName:"li"},Object(n.b)("li",{parentName:"ul"},"This function sets ",Object(n.b)("inlineCode",{parentName:"li"},"state.pageSize")," to the new value."),Object(n.b)("li",{parentName:"ul"},"As a result of a pageSize change, a new ",Object(n.b)("inlineCode",{parentName:"li"},"state.pageIndex")," is also calculated. It is calculated via ",Object(n.b)("inlineCode",{parentName:"li"},"Math.floor(currentTopRowIndex / newPageSize)"))))),Object(n.b)("h3",{id:"example"},"Example"),Object(n.b)("ul",null,Object(n.b)("li",{parentName:"ul"},"Basic Pagination",Object(n.b)("ul",{parentName:"li"},Object(n.b)("li",{parentName:"ul"},Object(n.b)("a",l({parentName:"li"},{href:"https://github.com/tannerlinsley/react-table/tree/master/examples/pagination"}),"Source")),Object(n.b)("li",{parentName:"ul"},Object(n.b)("a",l({parentName:"li"},{href:"https://codesandbox.io/s/github/tannerlinsley/react-table/tree/master/examples/pagination"}),"Open in CodeSandbox")))),Object(n.b)("li",{parentName:"ul"},"Controlled Pagination",Object(n.b)("ul",{parentName:"li"},Object(n.b)("li",{parentName:"ul"},Object(n.b)("a",l({parentName:"li"},{href:"https://github.com/tannerlinsley/react-table/tree/master/examples/pagination"}),"Source")),Object(n.b)("li",{parentName:"ul"},Object(n.b)("a",l({parentName:"li"},{href:"https://codesandbox.io/s/github/tannerlinsley/react-table/tree/master/examples/pagination"}),"Open in CodeSandbox"))))))}p&&p===Object(p)&&Object.isExtensible(p)&&!p.hasOwnProperty("__filemeta")&&Object.defineProperty(p,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"src/docs/api/usePagination.md"}}),p.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-docs-api-use-pagination-md-33a7fec26842fad8cd84.js.map